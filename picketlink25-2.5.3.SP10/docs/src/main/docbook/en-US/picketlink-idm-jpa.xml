<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Identity Management - Working with JPA</title>

      <section>
        <title>JPAIdentityStoreConfiguration</title>

        <para>
          The JPA identity store uses a relational database to store identity state.  The configuration for this identity store
          provides control over which entity beans are used to store identity data, and how their fields should be used to store
          various identity-related state.  The entity beans that store the identity data must be configured using the 
          annotations found in the <code>org.picketlink.jpa.annotations</code> package.  All identity configuration annotations
          listed in the tables below are from this package.
        </para>
        
        <section>
          <title>Default Database Schema</title>
          
          <para>
            If you do not wish to provide your own JPA entities for storing IDM-related state, you may use the default schema
            provided by PicketLink in the <literal>picketlink-idm-simple-schema</literal> module.  This module contains a collection
            of entity beans suitable for use with <code>JPAIdentityStore</code>.  To use this module, add the following dependency
            to your Maven project's <literal>pom.xml</literal> file:
          </para>
          
          <programlisting language="XML"><![CDATA[<dependency>
    <groupId>org.picketlink</groupId>
    <artifactId>picketlink-idm-simple-schema</artifactId>
    <version>${picketlink.version}</version>
</dependency>]]></programlisting>

          <para>
            In addition to including the above dependency, the default schema entity beans must be configured in your application's
            <literal>persistence.xml</literal> file.  Add the following entries within the <literal>persistence-unit</literal> 
            section:
          </para>
          
          <programlisting language="XML"><![CDATA[<class>org.picketlink.idm.jpa.model.sample.simple.AttributedTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.AccountTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RoleTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.GroupTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.IdentityTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RelationshipTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RelationshipIdentityTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.PartitionTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.PasswordCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.DigestCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.X509CredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.OTPCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.AttributeTypeEntity</class>
]]></programlisting>yes
        
        </section>

        <section>
          <title>Configuring an EntityManager</title>

          <para>
            Before the JPA identity store can be used, it must be provided with an <code>EntityManager</code> so that it can
            connect to a database.  In Java EE this can be done by providing a producer method within your application that 
            specifies the <code>@org.picketlink.annotations.PicketLink</code> qualifier, for example like so:
          </para>
              
          <programlisting language="JAVA"><![CDATA[@Produces
@PicketLink
@PersistenceContext(unitName = "picketlink")
private EntityManager picketLinkEntityManager;]]></programlisting>
        </section>

        <section>
          <title>Mapping <code>IdentityType</code> Types</title>

          <para>
            The following table summarizes all annotations that can be used to map entities to <code>IdentityType</code> types:
          </para>

          <table>
            <title><code>IdentityType</code> Annotations</title>

            <tgroup cols="4" align="left">
              <thead>
                <row>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  <entry>Property Type</entry>
                  <entry>Required</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>@IdentityManaged</code></entry>
                  <entry>
                    This annotation is a type-level annotation and must be used to specify the <code>IdentityType</code> types
                    that should be mapped by the annotated entity.
                  </entry>
                  <entry>-</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>
                    This annotation can be used to map a entity property to a <code>IdentityType</code> property. The <code>name</code> property of this annotation
                    can be used in case the property names are different.
                  </entry>
                  <entry>Any Type</entry>
                  <entry>False</entry>
                </row>
                <row>
                  <entry><code>@Identifier</code></entry>
                  <entry>
                    The unique identifier value for the identity.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@IdentityClass</code></entry>
                  <entry>
                    The type for the identity. When a <code>IdentityType</code> is stored the FQN of its type is stored in a property annotated with this annotation.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@OwnerReference</code></entry>
                  <entry>
                    The reference to a <code>Partition</code> mapped entity. This annotation is used to identify the property that holds a reference to the partition where a <code>IdentityType</code> belongs.
                    Usually this annotation is used in conjunction with a @ManyToOne property referencing the entity used to store partitions.
                  </entry>
                  <entry>The same type used to map a <code>Partition</code></entry>
                  <entry>True</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
              
          <para>
            The following code shows an example of an entity class configured to store <code>User</code> types:
          </para>
              
          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[@IdentityManaged (User.class)
@Entity
public class IdentityTypeEntity implements Serializable {

  @Id
  @Identifier
  private String id;

  @IdentityClass
  private String typeName;

  @AttributeValue
  private String loginName;

  @AttributeValue
  private Date createdDate;

  @AttributeValue
  private Date expirationDate;

  @AttributeValue
  private boolean enabled;

  @OwnerReference
  @ManyToOne
  private PartitionTypeEntity partition;

    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Mapping <code>Partition</code> Types</title>

          <para>
            The following table summarizes all annotations that can be used to map entities to <code>IdentityType</code> types:
          </para>

          <table>
            <title><code>Partition</code> Annotations</title>

            <tgroup cols="4" align="left">
              <thead>
                <row>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  <entry>Property Type</entry>
                  <entry>Required</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>@IdentityManaged</code></entry>
                  <entry>
                    This annotation is a type-level annotation and must be used to specify the <code>Partition</code> types
                    that should be mapped by the annotated entity.
                  </entry>
                  <entry>-</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>
                    This annotation can be used to map a entity property to a <code>Partition</code> property. The <code>name</code> property of this annotation
                    can be used in case the property names are different.
                  </entry>
                  <entry>Any Type</entry>
                  <entry>False</entry>
                </row>
                <row>
                  <entry><code>@Identifier</code></entry>
                  <entry>
                    The unique identifier value for the partition.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@PartitionClass</code></entry>
                  <entry>
                    The type for the partition. When a <code>Partition</code> is stored the FQN of its type is stored in a property annotated with this annotation.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@ConfigurationName</code></entry>
                  <entry>
                    This annotation must be used to indicate the field to store the configuration name for a partition.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>
            The following code shows an example of an entity class configured to store <code>Realm</code> types:
          </para>

          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[@IdentityManaged (Realm.class)
@Entity
public class PartitionTypeEntity implements Serializable {

  @Id
  @Identifier
  private String id;

  @AttributeValue
  private String name;

  @PartitionClass
  private String typeName;

  @ConfigurationName
  private String configurationName;

    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Mapping <code>Relationship</code> Types</title>

          <para>
            The following table summarizes all annotations that can be used to map entities to <code>Relationship</code> types:
          </para>

          <table>
            <title><code>Relationship</code> Annotations</title>

            <tgroup cols="4" align="left">
              <thead>
                <row>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  <entry>Property Type</entry>
                  <entry>Required</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>@IdentityManaged</code></entry>
                  <entry>
                    This annotation is a type-level annotation and must be used to specify the <code>Relationship</code> types
                    that should be mapped by the annotated entity.
                  </entry>
                  <entry>-</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>
                    This annotation can be used to map a entity property to a <code>Relationship</code> property. The <code>name</code> property of this annotation
                    can be used in case the property names are different.
                  </entry>
                  <entry>Any Type</entry>
                  <entry>False</entry>
                </row>
                <row>
                  <entry><code>@Identifier</code></entry>
                  <entry>
                    The unique identifier value for the relationship.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@RelationshipClass</code></entry>
                  <entry>
                    The type for the relationship. When a <code>Relationship</code> is stored the FQN of its type is stored in a property annotated with this annotation.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@RelationshipDescriptor</code></entry>
                  <entry>
                    This annotation must be used to indicate the field to store the name of the relationship role of a member.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@RelationshipMember</code></entry>
                  <entry>
                    The reference to a <code>IdentityType</code> mapped entity. This annotation is used to identify the property that holds a reference
                    to the identity type that belongs to this relationship with a specific descriptor.
                    Usually this annotation is used in conjunction with a @ManyToOne property referencing the entity used to store identity types.
                  </entry>
                  <entry>The same type used to map a <code>IdentityType</code></entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@OwnerReference</code></entry>
                  <entry>
                    The reference to a <code>Relationship</code> mapped entity. This annotation is used to identify the property that holds a reference to the root entity for relationships, usually the
                    entity annotated with the <code>@RelationshipClass</code> annotation.
                  </entry>
                  <entry>The same type used to map an entity with the <code>@RelationshipClass</code> annotation.</entry>
                  <entry>True</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>
            The following code shows an example of an entity class configured to store <code>Relationship</code> types:
          </para>

          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[@IdentityManaged (Relationship.class)
@Entity
public class RelationshipTypeEntity implements Serializable {

  @Id
  @Identifier
  private String id;

  @RelationshipClass
  private String typeName;

    // getters and setters
}]]></programlisting>
          </example>

          <para>
            When mapping a relationship you also need to provide a specific entity to store its members:
          </para>

          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[
@Entity
public class RelationshipIdentityTypeEntity implements Serializable {

  @Id
  @GeneratedValue
  private Long id;

  @RelationshipDescriptor
  private String descriptor;

  @RelationshipMember
  @ManyToOne
  private IdentityTypeEntity identityType;

  @OwnerReference
  @ManyToOne
  private RelationshipTypeEntity owner;

    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Mapping Attributes for <code>AttributedType</code> Types</title>

          <para>
            The following table summarizes all annotations that can be used to map attributes to <code>AttributedType</code> types:
          </para>

          <table>
            <title><code>Partition</code> Annotations</title>

            <tgroup cols="4" align="left">
              <thead>
                <row>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  <entry>Property Type</entry>
                  <entry>Required</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>@AttributeName</code></entry>
                  <entry>
                    The name of the attribute. A property with this annotation is used to store the name of the attribute.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>
                    The value of the attribute. A property with this annotation is used to store the value of the attribute. Values are Base64 encoded.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@AttributeClass</code></entry>
                  <entry>
                    The type for the attribute. When a attribute is stored the FQN of its type is stored in a property annotated with this annotation.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@OwnerReference</code></entry>
                  <entry>
                    The reference to a <code>IdentityType</code>, or a <code>Partition</code> or a <code>Relationship</code> mapped entity.
                    This annotation is used to identify the property that holds a reference to the owner of the attributes.
                  </entry>
                  <entry>The same type used to map <code>IdentityType</code>, or a <code>Partition</code> or a <code>Relationship</code> type.</entry>
                  <entry>True</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>
            The following code shows an example of an entity class configured to store attributes for <code>IdentityType</code> types:
          </para>

          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[
@Entity
public class IdentityTypeAttributeEntity implements Serializable {

  @OwnerReference
  @ManyToOne
  private IdentityTypeEntity owner;

  @AttributeClass
  private String typeName;

  @AttributeName
  private String name;

  @AttributeValue
  private String value;

    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Mapping a <code>CredentialStorage</code> type</title>

          <para>
            The following table summarizes all annotations that can be used to map attributes to <code>AttributedType</code> types:
          </para>

          <table>
            <title><code>Partition</code> Annotations</title>

            <tgroup cols="4" align="left">
              <thead>
                <row>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  <entry>Property Type</entry>
                  <entry>Required</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>@CredentialClass</code></entry>
                  <entry>
                    The type for the credential. When a credential is stored the FQN of its corresponding <code>CredentialStorage</code> type is stored in a property annotated with this annotation.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@CredentialProperty</code></entry>
                  <entry>
                    This annotation can be used to map a entity property to a <code>CredentialStorage</code> property. The <code>name</code> property of this annotation
                    can be used in case the property names are different.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@EffectiveDate</code></entry>
                  <entry>
                    The effective date for a credential. A property annotated with this annotation will be mapped to the <code>effectiveDate</code> of a <code>CredentialStorage</code> type.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@ExpiryDate</code></entry>
                  <entry>
                    The expiry date for a credential. A property annotated with this annotation will be mapped to the <code>expiryDate</code> of a <code>CredentialStorage</code> type.
                  </entry>
                  <entry>String</entry>
                  <entry>True</entry>
                </row>
                <row>
                  <entry><code>@OwnerReference</code></entry>
                  <entry>
                    The reference to a <code>IdentityType</code> mapped entity.
                    This annotation is used to identify the property that holds a reference to the owner of the credential.
                  </entry>
                  <entry>The same type used to map a <code>IdentityType</code> type.</entry>
                  <entry>True</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>
            The following code shows an example of an entity class configured to store password-based credentials for <code>IdentityType</code> types:
          </para>

          <example>
            <title>Example</title>
            <programlisting language="JAVA"><![CDATA[@ManagedCredential (EncodedPasswordStorage.class)
@Entity
public class PasswordCredentialTypeEntity implements Serializable {

  @Id
  @GeneratedValue
  private Long id;

  @OwnerReference
  @ManyToOne
  private IdentityTypeEntity owner;

  @CredentialClass
  private String typeName;

  @EffectiveDate
  private Date effectiveDate;

  @ExpiryDate
  private Date expiryDate;

  @CredentialProperty (name = "encodedHash")
  private String passwordEncodedHash;

  @CredentialProperty (name = "salt")
  private String passwordSalt;

    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Configuring the Mapped Entities</title>
          <para>
            Once your entities are properly mapped, you're ready to configure the JPA store with them. To do that you only need to:
          </para>

          <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
  .stores()
    .jpa()
      .mappedEntity(IdentityTypeEntity.class, PartitionTypeEntity.class, ...);]]></programlisting>

        </section>

        <section>
          <title>Providing a <code>EntityManager</code></title>
        	<para>
        		Sometimes you may need to configure how the <code>EntityManager</code> is provided to the <code>JPAIdentityStore</code>, like when your application is using CDI and you must run the operations
        		in the scope of the current transaction by using a injected <code>EntityManager</code> instance.
        	</para>
        	<para>
        		In cases like that, you need to initialize the <code>IdentityContext</code> by providing a <code>ContextInitializer</code> implementation, as discussed in <link linkend='idm_identity_context_configuration'>Identity Context Configuration</link>.
        		You can always provide your own implementation for this interface to obtain the <code>EntityManager</code> from your application's environment.
        	</para>
          <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
  .stores()
    .jpa()
      .addContextInitializer(new ContextInitializer() {
        @Override
        public void initContextForStore(IdentityContext context, IdentityStore<?> store) {
          if (store instanceof JPAIdentityStore) {
              EntityManager entityManager = // get the EntityManager
              context.setParameter(JPAIdentityStore.INVOCATION_CTX_ENTITY_MANAGER, entityManager);
          }
        }
      });]]></programlisting>
					<para>
						In most cases you don't need to provide your own <code>ContextInitializer</code> but use an implementation provided by PicketLink:
					</para>

          <programlisting language="JAVA"><![CDATA[@Inject
private EEJPAContextInitializer contextInitializer;

public void observeIdentityConfigurationEvent(@Observes IdentityConfigurationEvent event) {
  IdentityConfigurationBuilder builder = event.getConfig();

  builder
    .stores()
      .jpa()
        // more JPA store config
        .addContextInitializer(this.contextInitializer);
}]]></programlisting>
          </section>
        </section>

</chapter>
