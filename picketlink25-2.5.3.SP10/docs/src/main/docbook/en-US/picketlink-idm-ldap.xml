<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         id="picketlink-idm-ldap">
  <title>Identity Management - Working with LDAP</title>

  <section>
    <title>Overview</title>

    <para>
      The LDAP Identity Store allows a LDAP Directory to be used as a source of identity data. Most organizations rely
      on a LDAP Directory to store users, groups, roles and relationships between those entities. Some of them only
      store users and groups, others only users and so forth.
      The point is that each organization has its own structure, how data is organized on the server and policies to
      govern all that. That said, is very hard to get all different use cases satisfied given all those nuances.
    </para>

    <para>To try to overcome that, the LDAP Identity Store provides a simple and easy mapping between the entries in
      your LDAP tree and the PicketLink types (<code>IdentityType</code>,
      <code>Relationship</code>
      and so forth),
      plus some additional configuration options that give you more control how the store should integrate with your
      server.
    </para>

    <para>
      The store can be used in read-only or read-write mode. Depending on your permissions on the server, you should
      consider one of these alternatives, otherwise you can get errors when, for example, trying to add, update or
      remove entries from the server.
    </para>

    <para>
      The list below summarizes some of the most important capabilities provided by this store:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Mapping
          <code>IdentityType</code>
          types to their corresponding LDAP entries and attributes.
        </para>
      </listitem>
      <listitem>
        <para>
          Mapping
          <code>Relationship</code>
          types to their corresponding LDAP entries and attributes.
        </para>
      </listitem>
      <listitem>
        <para>
          Mapping of parent/child relationships between the LDAP entries mapped to the same type.
        </para>
      </listitem>
      <listitem>
        <para>
          Authentication of users based on username/password credentials.
        </para>
      </listitem>
      <listitem>
        <para>
          Use of LDAP UUID attributes as the identifier for identity types. For each identity type in PicketLink we need
          to
          provide a single/unique identifier. The LDAP store uses the
          <code>entryUUID</code>
          and
          <code>objectGUID</code>
          (depending on your server implementation, of course) to identify each type.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      But the LDAP Directory has also some limitations (schema limitations, restrictive usage policies) and because of
      that the LDAP Identity Store does not supports all the feature set provided by PicketLink.
      The table below lists what is not supported by the LDAP Identity Store:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <xref linkend="picketlink-idm-attributes"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Complex relationship mappings such as<code>GroupRole</code>.
        </para>
      </listitem>
      <listitem>
        <para>
          Relationships can not be updated directly using the<code>IdentityManager</code>.
        </para>
      </listitem>
      <listitem>
        <para>
          Limited support for credential types. Only username/password is available.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Configuration</title>

    <para>
      The LDAP Identity Store can be configured as follows:
    </para>

    <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
    .named("ldap.config")
        .stores()
            .ldap()
                // connection configuration
                .baseDN("dc=jboss,dc=org")
                .bindDN("uid=admin,ou=system")
                .bindCredential("passwd")
                .url("ldap://localhost:389")

                // mapping configuration
                .mapping(Agent.class)
                    .baseDN("ou=Agent,dc=jboss,dc=org")
                    .objectClasses("account")
                    .attribute("loginName", "uid", true)
                    .readOnlyAttribute("createdDate", "createTimeStamp")
                .mapping(User.class)
                    .baseDN("ou=User,dc=jboss,dc=org")
                    .objectClasses("inetOrgPerson", "organizationalPerson")
                    .attribute("loginName", "uid", true)
                    .attribute("firstName", "cn")
                    .attribute("lastName", "sn")
                    .attribute("email", EMAIL)
                    .readOnlyAttribute("createdDate", "createTimeStamp")
                .mapping(Role.class)
                    .baseDN("ou=Roles,dc=jboss,dc=org")
                    .objectClasses("role")
                    .attribute("name", "cn", true)
                    .readOnlyAttribute("createdDate", "createTimeStamp")
                .mapping(Group.class)
                  .hierarchySearchDepth(4)
                  .objectClasses("group")
                  .attribute("name", "cn", true)
                  .readOnlyAttribute("createdDate", "createTimeStamp")
                  .parentMembershipAttributeName("member")
                .mapping(Grant.class)
                    .forMapping(Role.class)
                    .attribute("assignee", "member")
                .mapping(GroupMembership.class)
                    .forMapping(Group.class)
                    .attribute("member", "member");]]></programlisting>

    <section>
      <title>Connecting to the LDAP Server</title>

      <para>
        The connection to your LDAP server can be configured as follows:
      </para>

      <programlisting language="JAVA"><![CDATA[.ldap()
  .baseDN("dc=jboss,dc=org")
  .bindDN("uid=admin,ou=system")
  .bindCredential("passwd")
  .url("ldap://localhost:389")]]></programlisting>

      <para>
        You can also provide additional connection <code>Properties</code> that will be used when creating the <code>LdapContext</code>.
      </para>

      <programlisting language="JAVA"><![CDATA[.ldap()
  .connectionProperties(myProperties)]]></programlisting>

      <para>
        The table below describes each configuration option:
      </para>

      <table>
        <title>LDAP Connection Configuration Options</title>
        <tgroup cols="2" align="left">
          <thead>
            <row>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <code>baseDN</code>
              </entry>
              <entry>Sets the base DN for a specific mapped type or all types.</entry>
            </row>
            <row>
              <entry>
                <code>bindDN</code>
              </entry>
              <entry>Sets the the DN used to bind against the ldap server. If you want to perform write operations the
                DN must have permissions on the agent,user,role and group contexts.
              </entry>
            </row>
            <row>
              <entry>
                <code>bindCredential</code>
              </entry>
              <entry>Sets the password for the bindDN.</entry>
            </row>
            <row>
              <entry>
                <code>url</code>
              </entry>
              <entry>Sets the url that should be used to connect to the server. Eg.: <![CDATA[ldap://<<server>>:389]]>
                .
              </entry>
            </row>
            <row>
              <entry>
                <code>connectionProperties</code>
              </entry>
              <entry>Set a <code>Properties</code> instance from where additional connection properties will be retrieved
                from when creating the <code>LdapContext</code>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Mapping Identity Types</title>

      <para>
        The LDAP configuration provides a simple mapping between your identity types and their corresponding LDAP entries.
        The way you map your types have a huge impact on how the LDAP Identity Store performs its operations.
      </para>

      <para>
        Usually, a mapping is done as follows:
      </para>

      <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
    .named("ldap.config")
        .stores()
            .ldap()
                .mapping(User.class)
                    .baseDN("ou=User,dc=jboss,dc=org")
                    .objectClasses("inetOrgPerson", "organizationalPerson")
                    .attribute("loginName", "uid", true)
                    .attribute("firstName", "cn")
                    .attribute("lastName", "sn")
                    .attribute("email", "mail")
                    .readOnlyAttribute("createdDate", "createTimeStamp")]]></programlisting>

      <para>
        For each mapping you need to provide the identity type being mapped (in the case above the <code>User</code> type)
        plus all information required to store the type and populate its properties from their corresponding LDAP attributes.
      </para>

      <para>
        In the example above, we're considering that <code>User</code> entries are located at the <emphasis>baseDN</emphasis> "ou=User,dc=jboss,dc=org".
        The baseDN is a very important information, specially if you want to store information from a type instance. Beside that,
        the baseDN can have a huge impact on performance when querying your LDAP entries for a specific type, as
        the search will be more restrictive and consider only those entries located at the baseDN and sub entries.
      </para>

      <para>
        Another important configuration is the <emphasis>objectClass</emphasis> list related with a type. The objectClass is very important when
        storing new entries in your LDAP server. Also, the objectClass helps the LDAP Identity Store to make better queries
        against your server by restricting which entries should be considered during the search based on the objectClass list you provide.
      </para>

      <para>
        In order to store and retrieve attributes from the LDAP server, you need to map them to the properties of your type.
        The attribute mapping is pretty simple, you just provide the name of the property being mapped and its corresponding
        LDAP attribute name. An important aspect when mapping the attributes is that you should always configure an attribute
        as the identifier. In the example above, we're telling the LDAP configuration to consider the following
        attribute as an identifier:
      </para>

      <programlisting language="JAVA"><![CDATA[.mapping(User.class)
  .attribute("loginName", "uid", true)]]></programlisting>

    </section>

    <section>
      <title>Mapping Relationship Types</title>

      <para>
        As mentioned before, the relationship support of the LDAP Identity Store is limited. But you can always map the most
        common relationships such as <code>Grant</code> and <code>GroupMembership</code>
      </para>

      <programlisting language="JAVA"><![CDATA[.ldap()
  .mapping(Grant.class)
    .forMapping(Role.class)
      .attribute("assignee", "member"))]]></programlisting>

      <para>
        When mapping a relationship type you need to configure which identity type is the owner of a relationship. For example,
        when mapping a <code>Grant</code> relationship, the LDAP attribute used to map the association between a role and other types
        is the <emphasis>member</emphasis> attribute. This attribute belongs to role entries on the LDAP server, what makes the <code>Role</code>
        type the owner of this relationship. For last, we need to tell which property on the <code>Grant</code> type is related
        with the associated entries. In the case of the <code>Grant</code> relationship, we're configuring the <emphasis>assignee</emphasis>
        property to store the associated type instances.
      </para>
    </section>

    <section>
      <title>Mapping a Type Hierarchies</title>

      <para>
        The LDAP configuration supports the mapping of simple hierarchies (parent/child) of a single type. This is specially
        useful when mapping groups, for example. Where groups can have a parent and also child groups.
      </para>

      <programlisting language="JAVA"><![CDATA[.ldap()
  .mapping(Group.class)
    .parentMembershipAttributeName("member")]]></programlisting>

      <para>
        In the example above, we're using the <emphasis>member</emphasis> attribute from LDAP to store the childs of a
        parent group.
      </para>

      <para>
        In some cases, the performance can be impacted when retrieving parent/child hierarchies from the LDAP server.
        By default, the LDAP Identity Store is configure to resolve only three levels of hierarchies. But you can always override
        this configuration as follows:
      </para>

      <programlisting language="JAVA"><![CDATA[.ldap()
  .mapping(Group.class)
    .hierarchySearchDepth(1)]]></programlisting>

      <para>In the example above, we're telling the LDAP Identity Store to consider only one level depth. Which means
      that only the direct parent of a group will be resolved.
      </para>
    </section>

    <section>
      <title>Mapping Groups to different contexts</title>

      <para>
        Sometimes may be useful to map a specific group to a specific context or DN.
      </para>

      <para>
        The following configuration maps the group with path
        <emphasis>/QA Group</emphasis>
        to
        <emphasis>ou=QA,ou=Groups,dc=jboss,dc=org</emphasis>
      </para>

      <programlisting language="JAVA"><![CDATA[mapping(Group.class)
  .baseDN(embeddedServer.getGroupDnSuffix())
  .objectClasses(GROUP_OF_NAMES)
  .attribute("name", CN, true)
  .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
  .parentMembershipAttributeName("member")
  .parentMapping("QA Group", "ou=QA,ou=Groups,dc=jboss,dc=org")]]></programlisting>

      <para>
        With this configuration you can have groups with the same name, but with different paths.
      </para>

      <programlisting language="JAVA"><![CDATA[IdentityManager identityManager = getIdentityManager();
Group managers = new SimpleGroup("managers");      

identityManager.add(managers); // group's path is /manager 
                  
Group qaGroup = identityManager.getGroup("QA Group");        
Group managersQA = new SimpleGroup("managers", qaGroup);

// the QA Group is mapped to a different DN.
Group qaManagerGroup = identityManager.add(managersQA); // group's path is /QA Group/managers]]></programlisting>
    </section>
  </section>

</chapter>
