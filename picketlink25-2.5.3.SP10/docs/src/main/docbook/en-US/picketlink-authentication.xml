<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-authentication">
  <title>Authentication</title>
  
    <section>
      <title>Overview</title>
      
      <para>
        Authentication is the act of verifying the identity of a user.  PicketLink offers an extensible authentication API
        that allows for significant customization of the authentication process, while also providing sensible defaults
        for developers that wish to get up and running quickly.  It also supports both synchronous and asynchronous
        user authentication, allowing for both a traditional style of authentication (such as logging in with a username
        and password), or alternatively allowing authentication via a federated identity service, such as OpenID, SAML or OAuth.  
        This chapter will endeavour to describe the authentication API and the authentication process in some detail, and is 
        a good place to gain a general overall understanding of authentication in PicketLink.  However, please note that since
        authentication is a cross-cutting concern, various aspects (for example Identity Management-based authentication and Federated
        authentication) are documented in other chapters of this book.
      </para>
    </section>
    
    <section>
      <title>Authentication API - the <code>Identity</code> bean</title>
      
      <para>
        The <code>Identity</code> bean (which can be found in the <code>org.picketlink</code> package) is central to PicketLink's
        security API.  This bean represents the authenticated user for the current session, and provides many useful methods for 
        controlling the authentication process and querying the user's assigned privileges.  In terms of authentication, the 
        <code>Identity</code> bean provides the following methods:
      </para>
      
      <programlisting language="JAVA"><![CDATA[AuthenticationResult login();

void logout();      

boolean isLoggedIn();

Account getAccount();]]></programlisting>
           
      <para>
        The <code>login()</code> method is the <emphasis>primary</emphasis> point of entry for the authentication process. Invoking
        this method will cause PicketLink to attempt to authenticate the user based on the credentials that they have provided.
        The <code>AuthenticationResult</code> type returned by the <code>login()</code> method is a simple enum that defines the
        following two values:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public enum AuthenticationResult {
    SUCCESS, FAILED
}]]></programlisting>

      <para>
        If the authentication process is successful, the <code>login()</code> method returns a result of <code>SUCCESS</code>,
        otherwise it returns a result of <code>FAILED</code>.  The default implementation of the <code>Identity</code> bean is 
        a <code>@SessionScoped</code> CDI bean, which means that once a user is authenticated they will stay authenticated for the 
        duration of the session.  
      </para>

      <note>
        <para>
          One significant point to note is the presence of the <code>@Named</code> annotation on the <code>Identity</code> bean,
          which means that its methods may be invoked directly from the view layer (if the view layer, such as JSF, supports it) 
          via an EL expression.</para>      
      </note>
      
      <para>
        One possible way to control the authentication process is by using an action bean, for example the following code might be
        used in a JSF application:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public @RequestScoped @Named class LoginAction {

    @Inject Identity identity;

    public void login() {
        AuthenticationResult result = identity.login();
        if (AuthenticationResult.FAILED.equals(result)) {
            FacesContext.getCurrentInstance().addMessage(null, 
                new FacesMessage(
                        "Authentication was unsuccessful.  Please check your username and password " +
                        "before trying again."));
        }
    }
}]]></programlisting>      

      <para>
        In the above code, the <code>Identity</code> bean is injected into the action bean via the CDI <code>@Inject</code> 
        annotation.  The <code>login()</code> method
        is essentially a wrapper method that delegates to <code>Identity.login()</code> and stores the authentication result in 
        a variable.  If authentication was unsuccessful, a <code>FacesMessage</code> is created to let the user know that
        their login failed.  Also, since the bean is <code>@Named</code> it can be invoked directly from a JSF control like so:
      </para>
      
      <programlisting language="XML"><![CDATA[<h:commandButton value="LOGIN" action="#{loginAction.login}"/>]]></programlisting>
      
      <para>
        The <code>Identity.isLoggedIn()</code> method may be used to determine whether there is a user logged in for the current session.
        It is typically used as an authorization check to control either an aspect of the user interface (for example, not
        displaying a menu item if the user isn't logged in), or to restrict certain business logic.  While logged in, 
        the <code>getAccount()</code> method can be used to retrieve the currently authenticated account (i.e. the user).  If the current
        session is not authenticated, then <code>getAccount()</code> will return <code>null</code>.  The following example
        shows both the <code>isLoggedIn()</code> and <code>getAgent()</code> methods being used inside a JSF page:
      </para>
      
      <programlisting language="XML"><![CDATA[<ui:fragment rendered="#{identity.loggedIn}">Welcome, #{identity.account.loginName}]]></programlisting>
      
      <note>
        <para>
          If you're wondering what an <code>Account</code> is, it is simply a representation of the external entity that is
          interacting and authenticating with your application. The <code>Account</code> interface is actually the superclass of 
          the <code>User</code> and <code>Agent</code>
          - see the Identity Management chapter for more details.
        </para>
      </note>      
      
      <para>
        The <code>logout()</code> method allows the user to log out, thereby clearing the authentication state for their session.  
        Also, if the user's session expires (for example due to inactivity) their authentication state will also be lost 
        requiring the user to authenticate again.
      </para>
      
      <para>
        The following JSF code example demonstrates how to render a log out button when the current user is logged in:
      </para>
      
      <programlisting language="XML"><![CDATA[<ui:fragment rendered="#{identity.loggedIn}">
    <h:form>
        <h:commandButton value="Log out" action="#{identity.logout}"/>
    </h:form>
</ui:fragment>]]></programlisting>
      
      <para>
        While it is the <code>Identity</code> bean that controls the overall authentication process, the actual authentication
        "business logic" is defined by the <code>Authenticator</code> interface:
      </para>
     
      <programlisting language="JAVA"><![CDATA[public interface Authenticator {
    public enum AuthenticationStatus {
        SUCCESS, 
        FAILURE, 
        DEFERRED
    }

    void authenticate();

    void postAuthenticate();

    AuthenticationStatus getStatus();

    Account getAccount();
}]]></programlisting>

      <para>
        During the authentication process, the <code>Identity</code> bean will invoke the methods of the <emphasis>active</emphasis>
        <code>Authenticator</code> (more on this in a moment) to perform user authentication.  The <code>authenticate()</code> method 
        is the most important of these, as it defines the actual authentication logic.  After <code>authenticate()</code> has been 
        invoked by the <code>Identity</code> bean, the <code>getStatus()</code> method will reflect the authentication status 
        (either <code>SUCCESS</code>, <code>FAILURE</code> or <code>DEFERRED</code>).  If the authentication process was a 
        success, the <code>getAccount()</code> method will return the authenticated <code>Account</code> object and the
        <code>postAuthenticate()</code> method will be invoked also.  If the authentication was not a success, 
        <code>getAccount()</code> will return <code>null</code>.
      </para>
    </section>
   
    <section>
      <title>The Authentication Process</title>
      
      <para>
        Now that we've looked at all the individual pieces, let's take a look at how they all work together to process an
        authentication request.  For starters, the following sequence diagram shows the class interaction that occurs during 
        a successful authentication:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/authentication_sequence.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/authentication_sequence.png" align="center"/>
        </imageobject>
      </mediaobject>     
      
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>1</emphasis> -
            The user invokes the <code>login()</code> method of the <code>Identity</code> bean.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1</emphasis> -
            The <code>Identity</code> bean (after performing a couple of validations) invokes its own <code>authenticate()</code>
            method.
          </para>
        </listitem>
        <listitem>                
          <para>
            <emphasis>1.1.1</emphasis> - 
            Next the <code>Identity</code> bean invokes the <code>Authenticator</code> bean's
            <code>authenticate()</code> method (which has a return value of <code>void</code>).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.2</emphasis> - 
            To determine whether authentication was successful, the <code>Identity</code> bean invokes the
            <code>Authenticator</code>'s <code>getStatus()</code> method, which returns a <code>SUCCESS</code>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.3</emphasis> - 
            Upon a successful authentication, the <code>Identity</code> bean then invokes the 
            <code>Authenticator</code>'s <code>postAuthenticate()</code> method to perform any post-authentication
            logic.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.4</emphasis> - 
            The <code>Identity</code> bean then invokes the <code>Authenticator</code>'s <code>getAccount()</code> method,
            which returns an <code>Account</code> object representing the authenticated agent, which is then stored as a
            private field in the <code>Identity</code> bean.
          </para>
        </listitem>
      </itemizedlist>     
      
      <para>
        The authentication process ends when the <code>Identity.authenticate()</code> method returns a value of 
        <literal>true</literal> to the <code>login()</code> method, which in turn returns an authentication result
        of <literal>SUCCESS</literal> to the invoking user.
      </para>
      
      <section>
        <title id="picketlink-authentication-basic">A Basic Authenticator</title>
        
        <para>
          Let's take a closer look at an extremely simple example of an <code>Authenticator</code>.  The following
          code demonstrates an <code>Authenticator</code> implementation that simply tests the username and password
          credentials that the user has provided against hard coded values of <literal>jsmith</literal> for the username,
          and <literal>abc123</literal> for the password, and if they match then authentication is deemed to be a success:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@PicketLink
public class SimpleAuthenticator extends BaseAuthenticator {

    @Inject DefaultLoginCredentials credentials;

    @Override
    public void authenticate() {
        if ("jsmith".equals(credentials.getUserId()) &&
                "abc123".equals(credentials.getPassword())) {
            setStatus(AuthenticationStatus.SUCCESS);
            setAccount(new User("jsmith"));
        } else {
            setStatus(AuthenticationStatus.FAILURE);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(
                    "Authentication Failure - The username or password you provided were invalid."));
        }
    }
}]]></programlisting>

        <para>
          The first thing we can notice about the above code is that the class is annotated with the 
          <code>@PicketLink</code> annotation.  This annotation indicates that this bean should be used
          for the authentication process.  The next thing is that the authenticator class extends something called
          <code>BaseAuthenticator</code>.  This abstract base class provided by PicketLink implements the 
          <code>Authenticator</code> interface and provides implementations of the <code>getStatus()</code> and 
          <code>getAccount()</code> methods (while also providing matching <code>setStatus()</code> and
          <code>setAccount()</code> methods), and also provides an empty implementation of
          the <code>postAuthenticate()</code> method.  By extending <code>BaseAuthenticator</code>, our 
          <code>Authenticator</code> implementation simply needs to implement the <code>authenticate()</code> method
          itself.
        </para>
        
        <para>
          We can see in the above code that in the case of a successful authentication, the <code>setStatus()</code> method
          is used to set the authentication status to <literal>SUCCESS</literal>, and the <code>setAccount()</code> method
          is used to set the user (in this case by creating a new instance of <code>User</code>).  For an
          unsuccessful authentication, the <code>setStatus()</code> method is used to set the authentication status to
          <literal>FAILURE</literal>, and a new <code>FacesMessage</code> is created to indicate to the user that
          authentication has failed.  While this code is obviously meant for a JSF application, it's possible to
          execute whichever suitable business logic is required for the view layer technology being used.
        </para>
        
        <para>
          One thing that hasn't been touched on yet is the following line of code:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@Inject DefaultLoginCredentials credentials;]]></programlisting>
        
        <para>
          This line of code injects the credentials that have been provided by the user using CDI's 
          <code>@Inject</code> annotation, so that our <code>Authenticator</code> implementation can query
          the credential values to determine whether they're valid or not.  We'll take a look at credentials in
          more detail in the next section.
        </para>
        
        <note>
          <para>
            You may be wondering what happens if you don't provide an <code>Authenticator</code> bean in your application.
            If this is the case, PicketLink will automatically authenticate via the identity management API, using a 
            sensible default configuration.  See the Identity Management chapter for more information.
          </para>
        </note>
      </section>
      
      <section>
        <title>Multiple Authenticator Support</title>
        
        <para>
          If your application needs to support multiple authentication methods, you can provide the authenticator selection 
          logic within a producer method annotated with <code>@PicketLink</code>, like so:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@RequestScoped
@Named
public class AuthenticatorSelector {

    @Inject Instance<CustomAuthenticator> customAuthenticator;
    @Inject Instance<IdmAuthenticator> idmAuthenticator;
    
    private String authenticator;
    
    public String getAuthenticator() {
        return authenticator;
    }
    
    public void setAuthenticator(String authenticator) {
        this.authenticator = authenticator;
    }

    @Produces
    @PicketLink
    public Authenticator selectAuthenticator() {
        if ("custom".equals(authenticator)) {
            return customAuthenticator.get();
        } else {
            return idmAuthenticator.get();
        }
    }
}]]></programlisting>

        <para>
          This <code>@Named</code> bean exposes an <code>authenticator</code> property that can be set by a
          user interface control in the view layer.  If its value is set to "custom" then <code>CustomAuthenticator</code>
          will be used, otherwise <code>IdmAuthenticator</code> (the <code>Authenticator</code> used to authenticate
          using the identity management API) will be used instead.  This is an extremely simple example but should give
          you an idea of how to implement a producer method for authenticator selection.
        </para>
      </section>
      
      <section>
        <title>Credentials</title>
        
        <para>
          Credentials are something that provides evidence of a user's identity; for example a username and password,
          an X509 certificate or some kind of biometric data such as a fingerprint.  PicketLink has extensive support for
          a variety of credential types, and also makes it relatively simple to add custom support for credential types 
          that PicketLink doesn't support out of the box itself.
        </para>

        <para>
          In the previous section, we saw a code example in which a <code>DefaultLoginCredentials</code> (an implementation of
          the <code>Credentials</code> interface that supports a user ID and a credential value) was injected into the 
          <code>SimpleAuthenticator</code>
          bean.  The most important thing to know about the <code>Credentials</code> interface in relation to writing your own
          custom <code>Authenticator</code> implementation is that <emphasis>you're not forced to use it</emphasis>.  
          <emphasis>However</emphasis>, while the <code>Credentials</code> interface is mainly designed for use with the 
          Identity Management API (which is documented in a separate chapter) and its methods would rarely be used in a custom
          <code>Authenticator</code>, PicketLink provides some implementations which are suitably convenient to use as such, 
          <code>DefaultLoginCredentials</code> being one of them.
        </para>   
        
        <para>
          So, in a custom <code>Authenticator</code> such as this:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public class SimpleAuthenticator extends BaseAuthenticator {

    @Inject DefaultLoginCredentials credentials;
    
    // code snipped
}]]></programlisting>        

        <para>
          The credential injection is totally optional.  As an alternative example, it is totally valid to create a
          request-scoped bean called <code>UsernamePassword</code> with simple getters and setters like so:
        </para>

        <programlisting language="JAVA"><![CDATA[public @RequestScoped class UsernamePassword {
    private String username;
    private String password;
    
    public String getUsername() { return username; }
    public String getPassword() { return password; }
    
    public void setUsername(String username) { this.username = username; }
    public void setPassword(String password) { this.password = password; }
}]]></programlisting>

       <para>
         And then inject that into the <code>Authenticator</code> bean instead:
       </para>

        <programlisting language="JAVA"><![CDATA[public class SimpleAuthenticator extends BaseAuthenticator {

    @Inject UsernamePassword usernamePassword;
    
    // code snipped
}]]></programlisting> 
        
        <para>
          Of course it is not recommended that you actually do this, however this simplistic example serves adequately for
          demonstrating the case in point.
        </para>

      </section>
      
      <section>
        <title>DefaultLoginCredentials</title>
        
        <para>
          The <code>DefaultLoginCredentials</code> bean is provided by PicketLink as a convenience, and is intended to
          serve as a general purpose <code>Credentials</code> implementation suitable for a variety of use cases.  It
          supports the setting of a <code>userId</code> and <code>credential</code> property, and provides convenience
          methods for working with text-based passwords.  It is a request-scoped bean and is also annotated with
          <code>@Named</code> so as to make it accessible directly from the view layer.
        </para>
        
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="diagrams/defaultlogincredentials.png" align="center" scalefit="1"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="diagrams/defaultlogincredentials.png" align="center"/>
          </imageobject>
        </mediaobject>       
        
        <para>
          A view technology with support for EL binding (such as JSF) can access the <code>DefaultLoginCredentials</code>
          bean directly via its bean name, <literal>loginCredentials</literal>.  The following code snippet shows some
          JSF markup that binds the controls of a login form to <code>DefaultLoginCredentials</code>:
        </para>   
        
        <programlisting language="XML"><![CDATA[<div class="loginRow">
  <h:outputLabel for="name" value="Username" styleClass="loginLabel"/>
  <h:inputText id="name" value="#{loginCredentials.userId}"/>
</div>

<div class="loginRow">
  <h:outputLabel for="password" value="Password" styleClass="loginLabel"/>
  <h:inputSecret id="password" value="#{loginCredentials.password}" redisplay="true"/>
</div>]]></programlisting>

      </section>
      
    </section>

</chapter>
