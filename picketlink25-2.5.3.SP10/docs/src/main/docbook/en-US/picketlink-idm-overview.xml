<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-overview">
  <title>Identity Management - Overview</title>

    <section>
      <title>Introduction</title>
      
      <para>
        PicketLink Identity Management (IDM) is a fundamental module of PicketLink, with all other modules building on top of the
        IDM component to implement their extended features.  It features provide a rich and extensible API for managing the identities 
        (such as users, groups and roles) of your applications and services.  It also supports a flexible system for identity 
        partitioning, allowing it to be used as a complete security solution in simple web applications and/or as an Identity Provider 
        (IDP) in more complex multi-domain scenarios.  It also provides the core Identity Model API classes (see below) upon which
        an application's identity classes are defined to provide the security structure for that application.
      </para>
      
      <para>
        The Identity Management features of PicketLink are accessed primarily via the following three interfaces:
      </para>
      
      <itemizedlist>
        <listitem>
          <para>
            <code>PartitionManager</code> is used to manage identity <emphasis>partitions</emphasis>, which are essentially
            a <emphasis>container</emphasis> for a set of identity objects.  The <code>PartitionManager</code> interface provides
            a set of CRUD methods for creating, reading, updating and deleting partitions, as well as methods for creating an
            <code>IdentityManager</code> or <code>RelationshipManager</code> (more on these next).  A typical Java EE application 
            with simple security requirements will likely not be required to access the <code>PartitionManager</code> API directly.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>IdentityManager</code> is used to manage <emphasis>identity objects</emphasis> within the scope of a partition.  
            Some examples of identity objects are users, groups and roles, although PicketLink is not limited to just these.
            Besides providing the standard set of CRUD methods for managing and locating identity objects, the 
            <code>IdentityManager</code> interface also defines methods for managing credentials and for creating identity
            queries which may be used to locate identities by their properties and attributes.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>RelationshipManager</code> is used to manage <emphasis>relationships</emphasis> - a relationship is a typed
            association between two or more identities, with each identity having a definitive meaning within the relationship.
            Some examples of relationships that may already be familiar are group memberships (where a user is a member of
            a particular group) or granted roles (where a user is assigned to a role to afford them a certain set of privileges).
            The <code>RelationshipManager</code> provides CRUD methods for managing relationships, and also for creating a relationship
            query which may be used to locate relationships between identities based on the relationship type and participating identity
            object/s.
          </para>
        </listitem>
      </itemizedlist>
        
      <note>
        <para>
          In case you are wondering why a separate <code>RelationshipManager</code> interface is required for managing relationships
          between identites, it is because PicketLink supports relationships between identities belonging to separate partitions; 
          therefore the scope of a <code>RelationshipManager</code> instance is not constrained to a single partition in the same way
          as the <code>IdentityManager</code>.
        </para>
      </note>
      
      <para>
        Interaction with the backend store that provides the persistent identity state is performed by configuring one or more
        <code>IdentityStore</code>s.  PicketLink provides a few built-in <code>IdentityStore</code> implementations for storing
        identity state in a database, file system or LDAP directory server, and it is possible to provide your own custom
        implementation to support storing your application's identity data in other backends, or extend the built-in implementations
        to override their default behaviour.
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/identity_manager_stores.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/identity_manager_stores.png" align="center"/>
        </imageobject>
      </mediaobject> 
      
      <section>
        <title>Injecting the Identity Management Objects</title>
        
        <para>
          In a Java EE environment PicketLink provides a set of producer methods for injecting the primary identity management
          objects into your CDI beans.  The following table outlines which IDM classes may be injected, and the CDI scope
          of each of the beans.
        </para>
      
        <table>
          <title>Identity Management Objects</title>
          
          <tgroup cols="2" align="left">
            <thead>
              <row>
                <entry>Class Name</entry>
                <entry>Scope</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry><code>org.picketlink.idm.PartitionManager</code></entry>
                <entry><code>@ApplicationScoped</code></entry>
              </row>
              <row>
                <entry><code>org.picketlink.idm.IdentityManager</code></entry>
                <entry><code>@RequestScoped</code></entry>
              </row>
              <row>
                <entry><code>org.picketlink.idm.RelationshipManager</code></entry>
                <entry><code>@RequestScoped</code></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      
      </section>
      
      <section>
        <title>Interacting with PicketLink IDM During Application Startup</title>
        
        <para>
          Since the <code>IdentityManager</code> and <code>RelationshipManager</code> beans are request scoped beans (as per the
          above table) it is not possible to inject them directly into a <code>@Startup</code> bean as there is no request scope
          available at application startup time.  Instead, if you wish to use the IDM API within a <code>@Startup</code> bean in 
          your Java EE application you may inject the <code>PartitionManager</code> (which is application-scoped) from which you 
          can then get references to the <code>IdentityManager</code> and <code>RelationshipManager</code>:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@Singleton
@Startup
public class InitializeSecurity {
    @Inject private PartitionManager partitionManager;

    @PostConstruct
    public void create() {
        // Create an IdentityManager
        IdentityManager identityManager = partitionManager.createIdentityManager();

        User user = new User("shane");
        identityManager.add(user);

        Password password = new Password("password");
        identityManager.updateCredential(user, password);
        
        // Create a RelationshipManager
        RelationshipManager relationshipManager = partitionManager.createRelationshipManager();
        
        // Create some relationships
    }
}]]></programlisting>
      </section>
      
      <section>
        <title>Configuring the Default Partition</title>
        
        <para>
          Since PicketLink has multiple-partition support, it is important to be able to control the associated partition for 
          the injected <code>IdentityManager</code>.  By default, PicketLink will injected an <code>IdentityManager</code> for the
          <emphasis>default Realm</emphasis> (i.e. the <code>org.picketlink.idm.model.basic.Realm</code> partition with a name of
          <emphasis>default</emphasis>).  If your application has basic security requirements then this might well be adequate, 
          however if you wish to override this default behaviour then simply provide a producer method annotated with the
          <code>@PicketLink</code> qualifier that returns the default partition for your application:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@ApplicationScoped
public class DefaultPartitionProducer {
    @Inject PartitionManager partitionManager;
    
    @Produces
    @PicketLink
    public Partition getDefaultPartition() {
        return partitionManager.getPartition(Tier.class, "warehouse.dispatch");
    }
}]]></programlisting>
      </section>
      
    </section>
    
    <section>
      <title id="picketlink-idm-overview-5min">Getting Started - The 5 Minute Guide</title>
      
      <para>
        If you'd like to get up and running with IDM quickly, the good news is that PicketLink will provide a default configuration 
        that stores your identity data on the file system if no other configuration is available.  This means that if you 
        have the PicketLink libraries in your project, you can simply inject the <code>PartitionManager</code>, 
        <code>IdentityManager</code> or <code>RelationshipManager</code> beans into your own application and start using them
        immediately:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Inject PartitionManager partitionManager;
@Inject IdentityManager identityManager;
@Inject RelationshipManager relationshipManager;]]></programlisting>
      
      <para>
        Once you have injected an <code>IdentityManager</code> you can begin creating users, groups and roles for your 
        application:
      </para>
      
      <note>
        <para>
          The following code examples make use of the classes provided as part of the <emphasis>basic identity model</emphasis>
          - see <xref linkend="picketlink-idm-basicmodel"/> for more information.
        </para>
      </note>
      
      <programlisting language="JAVA"><![CDATA[User user = new User("jdoe");
user.setFirstName("Jane");
user.setLastName("Doe");
identityManager.add(user);

Group group = new Group("employees");
identityManager.add(group);

Role admin = new Role("admin");
identityManager.add(admin);]]></programlisting>

      <para>
        Use the <code>RelationshipManager</code> to create relationships, such as role assignments and group memberships:
      </para>
      
      <programlisting language="JAVA"><![CDATA[// Grant the admin role to the user
relationshipManager.add(new Grant(user, admin));

// Add the user to the employees group
relationshipManager.add(new GroupMembership(user, group));]]></programlisting>

      <para>
        The static methods provided by the <code>org.picketlink.idm.model.basic.BasicModel</code> class are based on the
        basic identity model and may be used to lookup various identity objects, or test whether certain relationships exist.
        These methods accept either an <code>IdentityManager</code> or <code>RelationshipManager</code> object as a parameter.
      </para>
      
      <programlisting language="JAVA"><![CDATA[// Lookup the user by their username
User user = BasicModel.getUser(identityManager, "jdoe");

// Test if the user has the admin role
boolean isAdmin = BasicModel.hasRole(relationshipManager, user, role);

// Test if the user is a member of the employee group
boolean isEmployee = BasicModel.isMember(relationshipManager, user, group);]]></programlisting>
    </section>
    
    <section>
      <title>Identity Model</title>
      
      <para>
        The Identity Model is a set of classes that define the security structure of an application.  It may consist of identity
        objects such as users, groups and roles; relationships such as group and role memberships; and partitions such as realms or
        tiers.  The classes found in the <code>org.picketlink.idm.model</code> package define the base types upon which the identity
        model is built upon:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/identitymodel.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/identitymodel.png" align="center"/>
        </imageobject>
      </mediaobject>        
      
      <itemizedlist>
        <listitem>
          <para>
            <code>AttributedType</code> is the base interface for the identity model.  It declares a number of methods for
            managing a set of attribute values, plus <code>getId()</code> and <code>setId()</code> methods for setting a 
            unique identifier value.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Attribute</code> is used to represent an attribute value.  An attribute has a name and a (generically typed) value,
            and may be marked as read-only.  Attribute values that are expensive to load (such as large binary data) may be lazy-loaded; 
            the <code>isLoaded()</code> method may be used to determine whether the Attribute has been loaded or not.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Partition</code> is the base interface for partitions.  Since each partition must have a name it declares a
            <code>getName()</code> method.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Relationship</code> is the base interface for relationships.  Besides the base methods defined by 
            the <code>AttributedType</code> interface, relationship implementations have no further contractual requirements,
            however they will define methods that return the identities and attribute values in accordance with the relationship type.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>IdentityType</code> is the base interface for Identity objects.  It declares properties that indicate whether the
            identity object is enabled or not, optional created and expiry dates, plus methods to read and set the owning 
            <code>Partition</code>.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Account</code> is the base interface for identities that are capable of authenticating.  Since the authentication
            process may not depend on one particular type of attribute (not all authentication is performed with a username and
            password) there are no hard-coded property accessors defined by this interface.  It is up to each application to
            define the <code>Account</code> implementations required according to the application's requirements.            
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>AbstractAttributedType</code> is an abstract base class for creating <code>AttributedType</code> implementations.
          </para>
        </listitem>

        <listitem>
          <para>
            <code>AbstractPartition</code> is an abstract base class that implements the base methods of the <code>Partition</code>
            interface, to simplify the development of partition implementations.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>AbstractIdentityType</code> is an abstract base class that implements the base methods of the <code>IdentityType</code>
            interface, to simplify the development of identity objects.
          </para>
        </listitem>

      </itemizedlist>
      
      <section>
        <title>Which Identity Model Should My Application Use?</title>
        
        <para>
          The base identity types listed above do not define an identity model implementation themselves, so they cannot be used 
          directly to service the security requirements of an application.  Instead, an application must either define its own
          identity model (by providing implementations of whichever identity objects are required by the application,  such as user, 
          group or role classes) or by using a pre-prepared model.  PicketLink provides a <emphasis>basic</emphasis> identity model
          (more details can be found in <xref linkend="picketlink-idm-basicmodel"/>) which provides a basic set of identity objects,
          however in case the basic identity model is insufficient, it is quite simple to define a custom model as we'll see in
          the next section.
        </para>
      </section>     
    </section>
    
    <section>
      <title>Creating a Custom Identity Model</title>
      
      <para>
        A custom identity model typically consists of two types of objects - the <emphasis>identity</emphasis> objects which define
        the security constructs of an application, and the <emphasis>relationships</emphasis> which define how the identity objects
        interract with each other to establish a meaningful security policy.  PicketLink treats both types of object in an abstract
        manner, so it is up to the developer to create meaning for these objects and their relationships within the context of their
        own application.  This section will describe how to create new identity objects and customize their properties and attributes,
        while the following section will complete the picture by describing how custom relationships are created.
      </para>
      
      <para>
        Let's start by looking at the source for some of the identity objects in the basic model, starting with the <code>Agent</code>
        and <code>User</code> objects:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public class Agent extends AbstractIdentityType implements Account {
    private String loginName;

    public Agent() { }

    public Agent(String loginName) {
        this.loginName = loginName;
    }

    @AttributeProperty
    @Unique
    public String getLoginName() {
        return loginName;
    }

    public void setLoginName(String loginName) {
        this.loginName = loginName;
    }
}]]></programlisting>

      <programlisting language="JAVA"><![CDATA[public class User extends Agent {
    private String firstName;
    private String lastName;
    private String email;

    public User() { }

    public User(String loginName) {
        super(loginName);
    }

    @AttributeProperty
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @AttributeProperty
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @AttributeProperty
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}]]></programlisting>

      <para>
        The <code>Agent</code> class is intended to represent a third party entity that may authenticate against an application,
        whether human (a user) or non-human (an external or remote process).  Because <code>Agent</code> implements the
        <code>Account</code> marker interface, it is making a declaration that this identity object is capable of authenticating.
        To support the typical username/password authentication method, the <code>Agent</code> class defines a <code>loginName</code>
        property, however since the <code>Account</code> interface enforces no particular method of authentication (instead of a
        using username for authentication your application may require a certificate or fingerprint) this property is arbitrary.
      </para>
      
      <para>
        The <code>User</code> class represents a human user and extends <code>Agent</code> to add the human-specific properties
        <emphasis>firstName</emphasis>, <emphasis>lastName</emphasis> and <emphasis>email</emphasis>.  Since human users are also
        capable of authenticating it will also inherit the <code>loginName</code> property from the <code>Agent</code>.
      </para>
      
      <section id="picketlink-attribute-property-annotation">
        <title>The <code>@AttributeProperty</code> Annotation</title>
        
        <para>
          In the code above we can see that the getter methods of the identity objects are annotated with <code>@AttributeProperty</code>.
          This annotation (from the <code>org.picketlink.idm.model.annotation</code> package) is used to indicate that the property
          of the identity object should be persisted by the configured identity store when creating or updating the identity object. If
          this annotation was missing, then the property value would be <code>null</code> when loading the identity object from the 
          identity store.
        </para>
        
        <para>
          In this example, the annotation is placed on the getter method however it is also valid to place it on the corresponding
          field value.
        </para>
      </section>
      
      <section>
        <title>The <code>@Unique</code> Annotation</title>
        
        <para>
          In the above code listing for the <code>Agent</code> class, we can also see that there is a <code>@Unique</code> annotation
          on the <code>getLoginName()</code> getter method (in addition to the <code>@AttributeProperty</code> annotation).  This special
          annotation (also from the <code>org.picketlink.idm.model.annotation</code> package) is used to indicate to PicketLink that a
          unique constraint must be enforced on the property value - i.e. no two <code>Agent</code> objects (or their subclasses) may
          return the same value for <code>getLoginName()</code>.
        </para>
      </section>
      
    </section>
    
    <section>
      <title>Creating Custom Relationships</title>
        
      <para>
        One of the strengths of PicketLink is its ability to support custom relationship types.  This extensibility allows you, the
        developer to create specific relationship types between two or more identities to address the domain-specific requirements
        of your own application.  
      </para>
      
      <note>
        <para>
          Please note that custom relationship types are not supported by all <code>IdentityStore</code> implementations - 
          see the Identity Store section above for more information.
        </para>
      </note>
      
      <para>
        To create a custom relationship type, we start by creating a new class that implements the <code>Relationship</code> interface.
        To save time, we also extend the <code>AbstractAttributedType</code> abstract class which takes care of the identifier and
        attribute management methods for us:
      </para>
      
      <programlisting language="JAVA"><![CDATA[  public class Authorization extends AbstractAttributedType implements Relationship {
        
  }]]></programlisting>
        
      <para>
        The next step is to define which identities participate in the relationship.  Once we create our identity property methods,
        we also need to annotate them with the <code>org.picketlink.idm.model.annotation.RelationshipIdentity</code> annotation.  
        This is done by creating a property for each identity type.
      </para>
        
      <programlisting language="JAVA"><![CDATA[  private User user;
  private Agent application;
  
  @RelationshipIdentity
  public User getUser() {
    return user;
  }
  
  public void setUser(User user) {
    this.user = user;
  }
  
  @RelationshipIdentity
  public Agent getApplication() {
    return application;
  }
  
  public void setApplication(Agent application) {
    this.application = application;
  }]]></programlisting>
          
      <para>
        We can also define some attribute properties, using the <code>@RelationshipAttribute</code> annotation:
      </para>
          
      <programlisting language="JAVA"><![CDATA[  private String accessToken;
  
  @RelationshipAttribute
  public String getAccessToken() {
    return accessToken;
  }
  
  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }]]></programlisting>
    </section>
         

    <section>
      <title>Partition Management</title>
      
      <para>
        PicketLink has been designed from the ground up to support a system of <emphasis>partitioning</emphasis>, allowing the
        identity objects it manages to be separated into logical groupings.  Partitions may be used to split identities into
        separate <emphasis>realms</emphasis>, allowing an application to serve multiple organisations (for example in a SaaS
        architecture) or to support a multi-<emphasis>tier</emphasis> application allowing each tier to define its own set of
        identity objects (such as groups or roles).  PicketLink's architecture also allows you to define your own custom 
        partition types, allowing more complex use cases to be supported.
      </para>
      
      <para>
        The <code>PartitionManager</code> interface provides the following methods for managing partitions:
        
      </para>

      <programlisting language="JAVA"><![CDATA[public interface PartitionManager extends Serializable {

    <T extends Partition> T getPartition(Class<T> partitionClass, String name);

    <T extends Partition> List<T> getPartitions(Class<T> partitionClass);

    <T extends Partition> T lookupById(final Class<T> partitionClass, String id);

    void add(Partition partition);

    void add(Partition partition, String configurationName);

    void update(Partition partition);

    void remove(Partition partition);
}]]></programlisting>

      <para>
        To create a new <code>Partition</code> object you may use either of the <code>add()</code> methods.  If a 
        <code>configurationName</code> parameter value isn't provided (see <xref linkend="picketlink-idm-configuration"/> for more
        information), then the newly created <code>Partition</code> will use the default configuration.
      </para>
      
      <programlisting language="JAVA"><![CDATA[// Create a new Realm partition called "acme"
partitionManager.add(new Realm("acme"));]]></programlisting>

      <programlisting language="JAVA"><![CDATA[// Create a new Tier partition called "sales" using the named configuration "companyAD"
partitionManager.add(new Tier("sales"), "companyAD");]]></programlisting>

      <para>
        Each new <code>Partition</code> object created will be automatically assigned a unique identifier value, which can be accessed
        via its <code>getId()</code> method:
      </para>
      
      <programlisting language="JAVA"><![CDATA[Realm realm = new Realm("acme");
partitionManager.add(realm);      
String partitionId = realm.getId();]]></programlisting>

      <para>
        Partitions may be retrieved using either their name or their unique identifier value.  Both methods require the exact
        partition class to be provided as a parameter:
      </para>
      
      <programlisting language="JAVA"><![CDATA[Realm realm = partitionManager.getPartition(Realm.class, "acme");
Tier tier = partitionManager.lookupById(Tier.class, tierId);]]></programlisting>

      <para>
        It is also possible to retrieve all partitions for a given partition class. In this case you can retrieve all partitions
        for a given type or all of them:
      </para>

      <programlisting language="JAVA"><![CDATA[List<Realm> realms = partitionManager.getPartitions(Realm.class);
List<Partition> allPartitions = partitionManager.getPartitions(Partition.class);]]></programlisting>

      <para>
        Since <code>Partition</code> objects all implement the <code>AttributedType</code> interface, it is also possible to set
        arbitrary attribute values:
      </para>
      
      <programlisting language="JAVA"><![CDATA[realm.setAttribute(new Attribute<Date>("created", new Date()));]]></programlisting>
      
      <para>
        After making changes to an existing <code>Partition</code> object, the <code>update()</code> method may be used to persist
        those changes:
      </para>
      
      <programlisting language="JAVA"><![CDATA[partitionManager.update(realm);]]></programlisting>
      
      <para>
        A <code>Partition</code> object may also be removed with the <code>remove()</code> method:
      </para>
      
      <warning>
        <para>
          Removing a <code>Partition</code> object is permanent, and will also remove all identity objects that exist within that
          partition!
        </para>
      </warning>
      
      <programlisting language="JAVA"><![CDATA[partitionManager.remove(realm);]]></programlisting>
      
      <section>
        <title>Creating Custom Partitions</title>
        
        <para>
          Creating a custom partition type is extremely simple.  PicketLink provides an abstract base class called
          <code>AbstractPartition</code> (see above) which makes creating a custom partition class a trivial exercise -
          simply extend the <code>AbstractPartition</code> class and then add any additional property getter/setter methods
          that you might require.  Let's take a look at the built-in <code>Realm</code> class to see how little code it 
          requires to create a custom partition:
        </para>
        
        <programlisting language="JAVA"><![CDATA[@IdentityPartition(supportedTypes = {IdentityType.class})
public class Realm extends AbstractPartition {
    public Realm() {
        super(null);
    }

    public Realm(String name) {
        super(name);
    }
}]]></programlisting>

        <para>
          The <code>@IdentityPartition</code> annotation must be present on the partition class - the <code>supportedTypes</code>
          member is used to configure which identity types may be stored in this partition.  Any identity object (or subclass)
          specified by <code>supportedTypes</code> is valid.  There is also a <code>unsupportedTypes</code> member which may be
          used to specify identity types which <emphasis>may not</emphasis> be stored in the partition.  This value can be used
          to <emphasis>trim</emphasis> unsupported classes (and their subclasses) off the <code>supportedTypes</code>.
        </para>
      
      </section>
             
    </section>

</chapter>
