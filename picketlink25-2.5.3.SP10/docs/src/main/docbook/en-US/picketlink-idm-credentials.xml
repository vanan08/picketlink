<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-credentials">
  <title>Identity Management - Credential Validation and Management</title>
  
    <section>
      <title>Authentication</title>
      
      <note>
        <para>
          While the IDM module of PicketLink provides authentication features, for common use cases involving standard username and
          password based authentication in a Java EE environment, PicketLink provides a more streamlined method
          of authentication.  Please refer to <xref linkend="picketlink-authentication"/> for more information.
        </para>
      </note>
      
      <para>
        PicketLink IDM provides an authentication subsystem that allows user credentials to be validated thereby confirming
        that an authenticating user is who they claim to be.  The <code>IdentityManager</code> interface provides a single
        method for performing credential validation, as follows:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void validateCredentials(Credentials credentials);]]></programlisting>
      
      <para>
        The <code>validateCredentials()</code> method accepts a single <code>Credentials</code> parameter, which should
        contain all of the state required to determine who is attempting to authenticate, and the credential (such as a
        password, certificate, etc) that they are authenticating with.  Let's take a look at the <code>Credentials</code>
        interface:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public interface Credentials {
    public enum Status {
        UNVALIDATED, IN_PROGRESS, INVALID, VALID, EXPIRED
    };

   Account getValidatedAccount();
   
   Status getStatus();
   
   void invalidate();
}]]></programlisting>

      <itemizedlist>
        <listitem>
          <para>
            The <code>Status</code> enum defines the following values, which reflect the various credential states:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <code>UNVALIDATED</code> - The credential is yet to be validated.
              </para>
            </listitem>
            <listitem>
              <para>
                <code>IN_PROGRESS</code> - The credential is in the process of being validated.
              </para>
            </listitem>
            <listitem>
              <para>
                <code>INVALID</code> - The credential has been validated unsuccessfully
              </para>
            </listitem>
            <listitem>
              <para>
                <code>VALID</code> - The credential has been validated successfully
              </para>
            </listitem>
            <listitem>
              <para>
                <code>EXPIRED</code> - The credential has expired
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            <code>getValidatedAccount()</code> - If the credential was successfully validated, this method returns the
            <code>Account</code> object representing the validated user.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>getStatus()</code> - Returns the current status of the credential, i.e. one of the above enum values.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>invalidate()</code> - Invalidate the credential.  Implementations of <code>Credential</code> should use
            this method to clean up internal credential state.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Let's take a look at a concrete example - <code>UsernamePasswordCredentials</code> is a <code>Credentials</code>
        implementation that supports traditional username/password-based authentication:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public class UsernamePasswordCredentials extends AbstractBaseCredentials {

    private String username;

    private Password password;

    public UsernamePasswordCredentials() { }

    public UsernamePasswordCredentials(String userName, Password password) {
        this.username = userName;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public UsernamePasswordCredentials setUsername(String username) {
        this.username = username;
        return this;
    }

    public Password getPassword() {
        return password;
    }

    public UsernamePasswordCredentials setPassword(Password password) {
        this.password = password;
        return this;
    }

    @Override
    public void invalidate() {
        setStatus(Status.INVALID);
        password.clear();
    }
}]]></programlisting>

      <para>
        The first thing we may notice about the above code is that the <code>UsernamePasswordCredentials</code> class extends
        <code>AbstractBaseCredentials</code>.  This abstract base class implements the basic functionality required by the 
        <code>Credentials</code> interface.  Next, we can see that two fields are defined; <code>username</code> and <code>password</code>.
        These fields are used to hold the username and password state, and can be set either via the constructor,
        or by their associated setter methods.  Finally, we can also see that the <code>invalidate()</code> method sets the status to
        <code>INVALID</code>, and also clears the password value.
      </para>
      
      <para>
        Let's take a look at an example of the above classes in action.  The following code demonstrates how we would authenticate
        a user with a username of "john" and a password of "abcde":
      </para>
      
      <programlisting language="JAVA"><![CDATA[Credentials creds = new UsernamePasswordCredentials("john",
    new Password("abcde"));
identityManager.validate(creds);
if (Status.VALID.equals(creds.getStatus())) {
  // authentication was successful
}]]></programlisting>
    
      <para>
        We can also test if the credentials that were provided have expired (if an expiry date was set).  In this case we might
        redirect the user to a form where they can enter a new password.
      </para>
      
      <programlisting language="JAVA"><![CDATA[Credentials creds = new UsernamePasswordCredentials("john",
    new Password("abcde"));
identityManager.validate(creds);
if (Status.EXPIRED.equals(creds.getStatus())) {
  // password has expired, redirect the user to a password change screen
}]]></programlisting>
      
    </section>

    <section>
      <title>Managing Credentials</title>
      
      <para>
        Updating user credentials is even easier than validating them.  The <code>IdentityManager</code> interface provides the following
        two methods for updating credentials:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void updateCredential(Account account, Object credential);
void updateCredential(Account account, Object credential, Date effectiveDate, Date expiryDate);]]></programlisting>

      <para>
        Both of these methods essentially do the same thing; they update a credential value for a specified <code>Account</code>.
        The second overloaded method however also accepts <code>effectiveDate</code> and <code>expiryDate</code>
        parameters, which allow some temporal control over when the credential will be valid.  Use cases for this feature 
        include implementing a strict password expiry policy (by providing an expiry date), or creating a new account that might not 
        become active until a date in the future (by providing an effective date).  Invoking the first overloaded method will
        store the credential with an effective date of the current date and time, and no expiry date.
      </para>

      <note>      
        <para>
          One important point to note is that the <code>credential</code> parameter is of type <code>java.lang.Object</code>.  Since
          credentials can come in all shapes and sizes (and may even be defined by third party libraries), there is no common base 
          interface for credential implementations to extend.  To support this type of flexibility in an extensible way, PicketLink 
          provides an SPI that allows custom credential handlers to be configured that override or extend the default credential 
          handling logic.  Please see the next section for more information on how this SPI may be used.
        </para>
      </note>
      
      <para>
        Let's take a look at a couple of examples.  Here's some code demonstrating how a password can be assigned
        to user "jsmith":
      </para>
      
      <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");
identityManager.updateCredential(user, new Password("abcd1234"));]]></programlisting>

      <para>
        This example creates a digest and assigns it to user "jdoe":
      </para>
      
      <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jdoe");
Digest digest = new Digest();
digest.setRealm("default");
digest.setUsername(user.getLoginName());
digest.setPassword("abcd1234");        
identityManager.updateCredential(user, digest);]]></programlisting>
      
    </section>
    
    <section>
      <title>Credential Handlers</title>
      
      <para>
        For <code>IdentityStore</code> implementations that support multiple credential types, PicketLink provides
        an optional SPI to allow the default credential handling logic to be easily customized and extended. To get
        a better picture of the overall workings of the Credential Handler SPI, let's take a look at the sequence
        of events during the credential validation process when validating a username and password against
        <code>JPAIdentityStore</code>:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/username_password_validation.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/username_password_validation.png" align="center"/>
        </imageobject>
      </mediaobject>       
      
     <itemizedlist>
        <listitem>
          <para>
            <emphasis>1</emphasis> -
            The user (or some other code) first invokes the <code>validateCredentials()</code> method on <code>IdentityManager</code>,
            passing in the <code>Credentials</code> instance to validate.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1</emphasis> -
            After looking up the correct <code>IdentityStore</code> (i.e. the one that has been configured to validate credentials)
            the <code>IdentityManager</code> invokes the store's <code>validateCredentials()</code> method, passing in the
            <code>IdentityContext</code> and the credentials to validate.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.1</emphasis> - 
            In <code>JPAIdentityStore</code>'s implementation of the <code>validateCredentials()</code> method, the 
            <code>IdentityContext</code> is used to look up the <code>CredentialHandler</code> implementation that has been
            configured to process validation requests for usernames and passwords, which is then stored in a local variable
            called <code>handler</code>.
          </para>
        </listitem>
        <listitem>                
          <para>
            <emphasis>1.1.2</emphasis> -
            The <code>validate()</code> method is invoked on the <code>CredentialHandler</code>, passing in the security context,
            the credentials value and a reference back to the identity store.  The reference to the identity store is important
            as the credential handler may require it to invoke certain methods upon the store to validate the credentials.
          </para>
        </listitem>
      </itemizedlist>           
      
      <para>
        The <code>CredentialHandler</code> interface declares three methods, as follows:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public interface CredentialHandler {
    void setup(IdentityStore<?> identityStore);

    void validate(IdentityContext context, Credentials credentials,
                  IdentityStore<?> identityStore);

    void update(IdentityContext context, Account account, Object credential,
                IdentityStore<?> identityStore, Date effectiveDate, Date expiryDate);

}]]></programlisting>

      <para>
        The <code>setup()</code> method is called once, when the <code>CredentialHandler</code> instance is first created. 
        Credential handler instantiation is controlled by the <code>CredentialHandlerFactory</code>, which creates a single
        instance of each <code>CredentialHandler</code> implementation to service all credential requests for that handler.
        Each <code>CredentialHandler</code> implementation must declare the types of credentials that it is capable of supporting,
        which is done by annotating the implementation class with the <code>@SupportsCredentials</code> annotation like so:
      </para>
    
      <programlisting language="JAVA"><![CDATA[@SupportsCredentials(
  credentialClass = { UsernamePasswordCredentials.class, Password.class },
  credentialStorage = EncodedPasswordStorage.class
)
public class PasswordCredentialHandler implements CredentialHandler {]]></programlisting>

      <para>
        Since the <code>validate()</code> and <code>update()</code> methods receive different parameter types (<code>validate()</code>
        takes a <code>Credentials</code> parameter value while <code>update()</code> takes an <code>Object</code> that represents
        a single credential value), the <code>@SupportsCredentials</code> annotation must contain a complete list of all types supported
        by that handler.
      </para>
      
      <para>
        Similarly, if the <code>IdentityStore</code> implementation makes use of the credential handler SPI then it also must declare
        which credential handlers support that identity store.  This is done using the <code>@CredentialHandlers</code> annotation; 
        for example, the following code shows how <code>JPAIdentityStore</code> is configured to be capable of handling credential
        requests for usernames and passwords, X509 certificates and digest-based authentication:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@CredentialHandlers({ PasswordCredentialHandler.class,
          X509CertificateCredentialHandler.class, DigestCredentialHandler.class })
public class JPAIdentityStore implements IdentityStore<JPAIdentityStoreConfiguration>, 
                                         CredentialStore {]]></programlisting>
                                         
      <section>
        <title>The <code>CredentialStore</code> interface</title>
        
        <para>
          For <code>IdentityStore</code> implementations that support multiple credential types (such as <code>JPAIdentityStore</code>
          and <code>FileBasedIdentityStore</code>), the implementation may choose to also implement the <code>CredentialStore</code>
          interface to simplify the interaction between the <code>CredentialHandler</code> and the <code>IdentityStore</code>.  The
          <code>CredentialStore</code> interface declares methods for storing and retrieving credential values within an identity
          store, as follows:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public interface CredentialStore {
   void storeCredential(IdentityContext context, Account account,
                        CredentialStorage storage);
   <T extends CredentialStorage> T retrieveCurrentCredential(IdentityContext context,
                                                 Account account, Class<T> storageClass);
   <T extends CredentialStorage> List<T> retrieveCredentials(IdentityContext context,
                                                 Account account, Class<T> storageClass);
}]]></programlisting>
      </section>
      
      <section>
        <title>The <code>CredentialStorage</code> interface</title>

        <para>
          The <code>CredentialStorage</code> interface is essentially used to represent the state required to validate an account's 
          credentials, and is persisted within the identity store.  The base interface is quite simple and only 
          declares two methods - <code>getEffectiveDate()</code> and <code>getExpiryDate()</code>:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public interface CredentialStorage {
   @Stored Date getEffectiveDate();
   @Stored Date getExpiryDate();
}]]></programlisting>

        <para>
          The most significant thing to note above is the usage of the <code>@Stored</code> annotation.  This annotation is used to
          mark the properties of the <code>CredentialStorage</code> implementation that should be persisted.  The only requirement
          for any property values that are marked as <code>@Stored</code> is that they are serializable (i.e. they implement the
          <code>java.io.Serializable</code> interface).  The <code>@Stored</code> annotation may be placed on either the getter 
          method or the field variable itself.  An implementation of <code>CredentialStorage</code> will typically declare a number
          of properties (in addition to the <code>effectiveDate</code> and <code>expiryDate</code> properties) annotated with
          <code>@Stored</code>. Here's an example of one of a <code>CredentialStorage</code> implementation that
          is built into PicketLink - <code>EncodedPasswordStorage</code> is used to store a password hash and salt value:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public class EncodedPasswordStorage implements CredentialStorage {

    private Date effectiveDate;
    private Date expiryDate;
    private String encodedHash;
    private String salt;

    @Override @Stored
    public Date getEffectiveDate() {
        return effectiveDate;
    }

    public void setEffectiveDate(Date effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    @Override @Stored
    public Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    @Stored
    public String getEncodedHash() {
        return encodedHash;
    }

    public void setEncodedHash(String encodedHash) {
        this.encodedHash = encodedHash;
    }

    @Stored
    public String getSalt() {
        return this.salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

}]]></programlisting>
      
      </section>

    </section>
    
    <section>
      <title>Built-in Credential Handlers</title>

      <para>
        PicketLink provides built-in support for the following credential types:
      </para>

      <warning>
        <para>
          Not all built-in <code>IdentityStore</code> implementations support all credential types.  For example, since the
          <code>LDAPIdentityStore</code> is backed by an LDAP directory server, only password credentials are supported.  The
          following table lists the built-in <code>IdentityStore</code> implementations that support each credential type.
        </para>
      </warning>

      <table>
        <title>Built-in credential types</title>

        <tgroup cols="3" align="left">
          <thead>
            <row>
              <entry>Credential type</entry>
              <entry>Description</entry>
              <entry>Supported by</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><code>org.picketlink.idm.credential.Password</code></entry>
              <entry>A standard text-based password</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
                <code>LDAPIdentityStore</code>
              </entry>
            </row>
            <row>
              <entry><code>org.picketlink.idm.credential.Digest</code></entry>
              <entry>Used for digest-based authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
              </entry>
            </row>
            <row>
              <entry><code>java.security.cert.X509Certificate</code></entry>
              <entry>Used for X509 certificate based authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
              </entry>
            </row>
            <row>
              <entry><code>org.picketlink.idm.credential.TOTPCredential</code></entry>
              <entry>Used for Time-based One-time Password authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        The next sections will describe each of these built-in types individually.  Configuration parameters are set at initialization time -
        see <xref linkend="configuration_passing_parameters_to_credential_handlers"/> for details.
      </para>

      <section>
        <title>Username/Password-based Credential Handler</title>

        <para>
          This credential handlers supports a username/password based authentication.
        </para>

        <para>
          Credentials can be updated as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");
identityManager.updateCredential(user, new Password("abcd1234"));]]></programlisting>

        <para>
          In order to validate a credential you need to the following code:
        </para>

        <programlisting language="JAVA"><![CDATA[UsernamePasswordCredentials credential = new UsernamePasswordCredentials();

Password password = new Password("abcd1234");

credential.setUsername("jsmith");
credential.setPassword(password);

identityManager.validateCredentials(credential);

if (Status.VALID.equals(credential.getStatus()) {
  // successful validation
} else {
  // invalid credential
}]]></programlisting>

        <section>
          <title>Configuration Parameters</title>

          <para>
            The following table describes all configuration parameters supported by this credential handler:
          </para>

          <table>
            <title>Configuration Parameters</title>

            <tgroup cols="2" align="left">
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody valign="top">
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>PASSWORD_ENCODER</code></entry>
                  <entry>It must be a <code>org.picketlink.idm.credential.encoder.PasswordEncoder</code> sub-type. It defines how passwords are encoded. Defaults to SHA-512.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>SECURE_RANDOM_PROVIDER</code></entry>
                  <entry>It must be a <code>org.picketlink.common.random.SecureRandomProvider</code> sub-type. It defines how <code>SecureRandom</code> are created in order to be used to generate random numbers to salt passwords. Defaults to SHA1PRNG with a default seed.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>RENEW_RANDOM_NUMBER_GENERATOR_INTERVAL</code></entry>
                  <entry>To increase the security of generated salted passwords, <code>SecureRandom</code> instances can be renewed from time to time. This option defines the time in milliseconds.
                    Defaults to disabled, what means that a single instance is used during the life-time of the application.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>ALGORITHM_RANDOM_NUMBER</code></entry>
                  <entry>Defines the algorithm to be used by the default <code>SecureRandomProvider</code>. Defaults to SHA1PRNG.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>KEY_LENGTH_RANDOM_NUMBER</code></entry>
                  <entry>Defines the key length of seeds when using the default <code>SecureRandomProvider</code>. Defaults to 0, which means it is disabled.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>LOGIN_NAME_PROPERTY</code></entry>
                  <entry>This option defines the name of the property used to lookup the <literal>Account</literal>
 object using the provided login name.  It has a default value of <literal>loginName</literal> and can be overridden if the credential handler is to be used to authenticate an <literal>Account</literal> type that uses a different property name.</entry>
                </row>
                <row>
                  <entry><code>PasswordCredentialHandler.</code>
                  <code>SUPPORTED_ACCOUNT_TYPES</code></entry>
                  <entry>This option defines any additional <literal>Account</literal> types that are supported by the credential handler.  If no value is
                  specified and/or no identity instances of the specified types are found then the credential handler's fall back behaviour is to attempt to 
                  lookup either an <literal>Agent</literal> or <literal>User</literal> (from the <literal>org.picketlink.idm.model.basic</literal> package) 
                  identity. The property value is expected to be an array of <literal><![CDATA[Class<? extends Account>]]></literal> objects.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section>
        <title>DIGEST-based Credential Handler</title>

        <para>
          This credential handlers supports a DIGEST based authentication.
        </para>

        <para>
          Credentials can be updated as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");
Digest digest = new Digest();

digest.setRealm("PicketLink Realm");
digest.setUsername(user.getLoginName());
digest.setPassword("abcd1234");

identityManager.updateCredential(user, digest);]]></programlisting>

        <para>
          In order to validate a credential you need to the following code:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

Digest digest = new Digest();

digest.setRealm("PicketLink Realm");
digest.setUsername(user.getLoginName());
digest.setPassword("abcd1234");

digest.setDigest(DigestUtil.calculateA1(user.getLoginName(), digest.getRealm(), digest.getPassword().toCharArray()));

DigestCredentials credential = new DigestCredentials(digestPassword);

identityManager.validateCredentials(credential);

if (Status.VALID.equals(credential.getStatus()) {
// successful validation
} else {
// invalid credential
}]]></programlisting>
      </section>
      <section>
        <title>X509-based Credential Handler</title>

        <para>
          This credential handlers supports a X509 certificates based authentication.
        </para>

        <para>
          Credentials can be updated as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

java.security.cert.X509Certificate clientCert = // get user certificate

identityManager.updateCredential(user, clientCert);]]></programlisting>

        <para>
          In order to validate a credential you need to the following code:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

java.security.cert.X509Certificate clientCert = // get user certificate
X509CertificateCredentials credential = new X509CertificateCredentials(clientCert);

identityManager.validateCredentials(credential);

if (Status.VALID.equals(credential.getStatus()) {
// successful validation
} else {
// invalid credential
}]]></programlisting>

        <para>
          In some cases, you just want to trust the provided certificate and only check the existence of the principal:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

java.security.cert.X509Certificate clientCert = // get user certificate
X509CertificateCredentials credential = new X509CertificateCredentials(clientCert);

// trust the certificate and only check the principal existence
credential.setTrusted(true);

identityManager.validateCredentials(credential);

if (Status.VALID.equals(credential.getStatus()) {
// successful validation
} else {
// invalid credential
}]]></programlisting>
      </section>
      <section>
        <title>Time-based One Time Password Credential Handler</title>

        <para>
          This credential handlers supports a username/password based authentication.
        </para>

        <para>
          Credentials can be updated as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

TOTPCredential credential = new TOTPCredential("abcd1234", "my_totp_secret");

identityManager.updateCredential(user, credential);]]></programlisting>

        <para>
          Users can have multiple TOTP tokens, one for each device. You can provide configure tokens for a specific user device as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

TOTPCredential credential = new TOTPCredential("abcd1234", "my_totp_secret");

credential.setDevice("My Cool Android Phone");

identityManager.updateCredential(user, credential);]]></programlisting>

        <para>
          In order to validate a credential you need to the following code:
        </para>

        <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");

TOTPCredentials credential = new TOTPCredentials();

credential.setUsername(user.getLoginName());
credential.setPassword(new Password("abcd1234"));

TimeBasedOTP totp = new TimeBasedOTP();

// let's manually generate a token based on the user secret
String token = totp.generate("my_totp_secret");

credential.setToken(token);

// if you want to validate the token for a specific device
// credential.setDevice("My Cool Android Phone");

identityManager.validateCredentials(credential);

if (Status.VALID.equals(credential.getStatus()) {
  // successful validation
} else {
  // invalid credential
}]]></programlisting>

        <section>
          <title>Configuration Parameters</title>

          <para>
            The following table describes all configuration parameters supported by this credential handler:
          </para>

          <table>
            <title>Configuration Parameters</title>

            <tgroup cols="2" align="left">
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody valign="top">
                <row>
                  <entry><code>TOTPCredentialHandler.ALGORITHM</code></entry>
                  <entry>The encryption algorithm. Defaults to HmacSHA1.</entry>
                </row>
                <row>
                  <entry><code>TOTPCredentialHandler.INTERVAL_SECONDS</code></entry>
                  <entry>The number of seconds a token is valid. Defaults to 30 seconds.</entry>
                </row>
                <row>
                  <entry><code>TOTPCredentialHandler.NUMBER_DIGITS</code></entry>
                  <entry>The number of digits for a token. Defaults to 6 digits.</entry>
                </row>
                <row>
                  <entry><code>TOTPCredentialHandler.DELAY_WINDOW</code></entry>
                  <entry>the number of previous intervals that should be used to validate tokens. Defaults to 1 interval of 30 seconds.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
    </section>

    <section>
      <title>Implementing a Custom <code>CredentialHandler</code></title>

      <para>
        In this section we'll dissect the <literal>PasswordCredentialHandler</literal> to learn how to create a custom credential handler. The
        <literal>AbstractCredentialHandler</literal> abstract class is provided to simplify the process of creating a new credential handler,
        and is also used by <literal>PasswordCredentialHandler</literal> as a base class:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/credential_handler_class_diagram.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/credential_handler_class_diagram.png" align="center"/>
        </imageobject>
      </mediaobject>  
      
      <para>
        Let's start by looking at the class declaration for <literal>PasswordCredentialHandler</literal>:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@SupportsCredentials(
        credentialClass = {UsernamePasswordCredentials.class, Password.class},
        credentialStorage = EncodedPasswordStorage.class)
public class PasswordCredentialHandler<S extends CredentialStore<?>, 
    V extends UsernamePasswordCredentials, 
    U extends Password>
    extends AbstractCredentialHandler<S, V, U> {]]></programlisting>
        
      <para>
        The <literal>@SupportsCredentials</literal> annotation is used to declare exactly which credential classes are supported by the
        credential handler (as indicated by the <literal>credentialClass</literal> annotation member).  The supported credential classes
        include both credentials used to authenticate via the <literal>validate()</literal> method (i.e. a class that implements the
        <literal>org.picketlink.idm.credential.Credentials</literal> interface, in this example <literal>UsernamePasswordCredentials</literal>) 
        and the actual encapsulated credential value (e.g. <literal>org.picketlink.idm.credential.Password</literal>).  These supported
        credential classes are also reflected in the generic type declaration of the class itself - the <literal>V</literal> and 
        <literal>U</literal> types in the code above.  The <literal>credentialStorage</literal> annotation member declares the storage class
        used to persist the necessary state for the credential.  The storage class must implement the 
        <literal>org.picketlink.idm.credential.storage.CredentialStorage</literal> interface.
      </para>
      
      <para>
        The <literal>setup()</literal> method is executed only once and is used to perform any required initialization for the credential handler.
        In the case of <literal>PasswordCredentialHandler</literal>, the <literal>setup()</literal> method reads the configuration properties
        (made available from <literal>store.getConfig().getCredentialHandlerProperties()</literal>) and uses those property values to initialize the 
        state required for encoding password values.
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Override
public void setup(S store) {
    super.setup(store);

    Map<String, Object> options = store.getConfig().getCredentialHandlerProperties();

    if (options != null) {
        Object providedEncoder = options.get(PASSWORD_ENCODER);

        if (providedEncoder != null) {
            if (PasswordEncoder.class.isInstance(providedEncoder)) {
                this.passwordEncoder = (PasswordEncoder) providedEncoder;
            } else {
                throw new SecurityConfigurationException("The password encoder [" + 
                    providedEncoder + "] must be an instance of " + 
                    PasswordEncoder.class.getName());
            }
        }

        Object renewRandomNumberGeneratorInterval = options.get(
            RENEW_RANDOM_NUMBER_GENERATOR_INTERVAL);

        if (renewRandomNumberGeneratorInterval != null) {
            this.renewRandomNumberGeneratorInterval = Integer.valueOf(
                renewRandomNumberGeneratorInterval.toString());
        }

        Object secureRandomProvider = options.get(SECURE_RANDOM_PROVIDER);

        if (secureRandomProvider != null) {
            this.secureRandomProvider = (SecureRandomProvider) secureRandomProvider;
        } else {
            Object saltAlgorithm = options.get(ALGORITHM_RANDOM_NUMBER);

            if (saltAlgorithm == null) {
                saltAlgorithm = DEFAULT_SALT_ALGORITHM;
            }

            Object keyLengthRandomNumber = options.get(KEY_LENGTH_RANDOM_NUMBER);

            if (keyLengthRandomNumber == null) {
                keyLengthRandomNumber = Integer.valueOf(0);
            }

            this.secureRandomProvider = new DefaultSecureRandomProvider(
                saltAlgorithm.toString(), 
                Integer.valueOf(keyLengthRandomNumber.toString()));
        }
    }

    this.secureRandom = createSecureRandom();
}]]></programlisting>

      <para>
        The credential validation logic is defined by the <literal>validateCredential()</literal> method.  This method (which the parent
        <literal>AbstractCredentialHandler</literal> class declares as an abstract method) checks the validity of the credential value passed in and
        either returns <literal>true</literal> if the credential is valid or <literal>false</literal> if it is not.  The 
        <literal>validateCredential()</literal> method is a convenience method which delegates much of the boilerplate code required for credential
        validation to <literal>AbstractCredentialHandler</literal>, allowing the subclass to simply define the bare minimum code required to
        validate the credential.  If you were to implement a <literal>CredentialHandler</literal> without using <literal>AbstractCredentialHandler</literal>
        as a base class, you would instead need to implement the <literal>validate()</literal> method which in general requires a fair bit more code.
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Override
protected boolean validateCredential(final CredentialStorage storage, 
    final V credentials) {
    EncodedPasswordStorage hash = (EncodedPasswordStorage) storage;

    if (hash != null) {
        String rawPassword = new String(credentials.getPassword().getValue());
        return this.passwordEncoder.verify(saltPassword(rawPassword, 
            hash.getSalt()), hash.getEncodedHash());
    }

    return false;
}]]></programlisting>

      
      <para>
        The <literal>update()</literal> method (in contrast to <literal>validateCredential</literal>) <emphasis>is</emphasis> defined
        by the <literal>CredentialHandler</literal> interface itself, and is used to persist a credential value to the backend
        identity store.  In <literal>PasswordCredentialHandler</literal> this method creates a new instance of
        <literal>EncodedPasswordStorage</literal>, a <literal>CredentialStorage</literal> implementation that represents a password's
        hash and salt values.  The salt value in this implementation is randomly generated using the configured property values, and
        then used to encode the password hash.  This value is then stored by calling the <literal>store.storeCredential()</literal> method.
      </para>
      
      <programlisting language="JAVA"><![CDATA[@Override
public void update(IdentityContext context, Account account, U password, S store,
                   Date effectiveDate, Date expiryDate) {

    EncodedPasswordStorage hash = new EncodedPasswordStorage();

    if (password.getValue() == null || isNullOrEmpty(password.getValue().toString())) {
        throw MESSAGES.credentialInvalidPassword();
    }

    String rawPassword = new String(password.getValue());

    String passwordSalt = generateSalt();

    hash.setSalt(passwordSalt);
    hash.setEncodedHash(this.passwordEncoder.encode(saltPassword(rawPassword, 
        passwordSalt)));

    if (effectiveDate != null) {
        hash.setEffectiveDate(effectiveDate);
    }

    hash.setExpiryDate(expiryDate);

    store.storeCredential(context, account, hash);
}]]></programlisting>

    </section>
    
</chapter>
