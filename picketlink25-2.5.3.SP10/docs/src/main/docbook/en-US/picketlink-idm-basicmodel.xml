<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-basicmodel">
  <title>Identity Management - Basic Identity Model</title>
  
    <section>
      <title>Basic Identity Model</title>
      
      <para>
        For the sake of convenience, PicketLink provides a basic identity model that consists of a number of core interfaces which
        define a set of fundamental identity types which might be found in a typical application.  The usage of this identity model 
        is entirely optional; for an application with basic security requirements the basic identity model might be more than
        sufficient, however for a more complex application or application with custom security requirements it may be necessary to
        create a custom identity model.
      </para>
      
      <para>
        The following class diagram shows the classes and interfaces in the <code>org.picketlink.idm.model.basic</code> package:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/basicidentitymodel.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/basicidentitymodel.png" align="center"/>
        </imageobject>
      </mediaobject>      
      
      <itemizedlist>
        
        <listitem>
          <para>
            <code>Agent</code> represents a unique entity that may access the services secured by PicketLink.  In contrast to a user
            which represents a human, <code>Agent</code> is intended to represent a third party non-human (i.e. machine to machine) 
            process that may authenticate and interact with your application or services.  It declares methods for reading and setting
            the <code>Agent</code>'s login name.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>User</code> represents a human user that accesses your application and services.  In addition to the login name
            property defined by its parent interface <code>Agent</code>, the <code>User</code> interface declares a number of other
            methods for managing the user's first name, last name and e-mail address.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Group</code> is used to manage collections of identity types.  Each <code>Group</code> has a name and an optional
            parent group.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Role</code> is used in various relationship types to designate authority to another identity type to perform
            various operations within an application.  For example, a forum application may define a role called 
            <emphasis>moderator</emphasis> which may be assigned to one or more <code>User</code>s or <code>Group</code>s to indicate 
            that they are authorized to perform moderator functions.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Grant</code> relationship represents the assignment of a <code>Role</code> to an identity.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>GroupMembership</code> relationship represents a <code>User</code> (or <code>Agent</code>) membership within 
            a <code>Group</code>.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>GroupRole</code> relationship represents the the assignment of a specific <code>Role</code> within a 
            <code>Group</code> to a <code>User</code> or <code>Agent</code>.  The reason this relationship extends the
            <code>GroupMembership</code> relationship is simply so it inherits the <code>getMember()</code> and
            <code>getGroup()</code> methods - being assigned to a <code>GroupRole</code> <emphasis>does not</emphasis> mean
            that the <code>User</code> (or <code>Agent</code>) that was assigned the group role also becomes a member of the
            group.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Realm</code> is a partition type, and may be used to store any <code>IdentityType</code> objects (including
            <code>Agent</code>s, <code>User</code>s, <code>Group</code>s or <code>Role</code>s.
          </para>
        </listitem>

        <listitem>
          <para>
            <code>Tier</code> is a specialized partition type, and may be only used to store <code>Group</code> or <code>Role</code>
            objects specific to an application.
          </para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Utility Class for the Basic Identity Model</title>

        <para>
          PicketLink also provides an utility class with some very useful and common methods to manipulate the basic identity model.
          Along the documentation you'll find a lot of examples using the the following class: <code>org.picketlink.idm.model.basic.BasicModel</code>.
          If you're using the basic identity model, this helper class can save you a lot of code and make your application even more simple.
        </para>

        <para>
          The list below summarizes some of the functionalities provided by this class:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Retrieve <code>User</code> and <code>Agent</code> instances by login name.
            </para>
          </listitem>

          <listitem>
            <para>
              Retrieve <code>Role</code> and <code>Group</code> instances by name.
            </para>
          </listitem>

          <listitem>
            <para>
              Add users as group members, grant roles to users. As well check if an user is member of a group or has a specific role.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          One import thing to keep in mind is that the <code>BasicModel</code> helper class is only suitable if you're using the types
          provided by the basic identity model, only. If you are using custom types, even if those are sub-types of any of the types provided
          by the basic identity model, you should handle those custom types directly using the PicketLink IDM API.
        </para>

        <para>
          As an example, let's suppose you have a custom type which extends the <code>Agent</code> type.
        </para>

        <programlisting language="JAVA"><![CDATA[  SalesAgent salesAgent = BasicModel.getUser(identityManager, "someSalesAgent");]]></programlisting>

        <para>
          The code above will never return a <code>SalesAgent</code> instance. The correct way of doing that is using the Query API directly as follows:
        </para>

        <programlisting language="JAVA"><![CDATA[  public SaleAgent findSalesAgent(String loginName) {
      List<SaleAgent> result = identityManager
                                .createIdentityQuery(SaleAgent.class)
                                .setParameter(SaleAgent.LOGIN_NAME, loginName)
                                .getResultList();
      return result.isEmpty() ? null : result.get(0);
}]]></programlisting>

        <warning>
          <para>
            Please note that the <code>BasicModel</code> helper class is only suitable for use cases where only the types provided by the basic identity model are used.
            If your application have also custom types, they need to be handled directly using the PicketLink IDM API.
          </para>
        </warning>
      </section>

    </section>

    <section>
      <title>Managing Users, Groups and Roles</title>
      
      <para>
        PicketLink IDM provides a number of basic implementations of the identity model interfaces for convenience, in the
        <code>org.picketlink.idm.model.basic</code> package.  The following sections provide examples that show these
        implementations in action.
      </para>
  
      <section>
        <title>Managing Users</title>
        
        <para>
          The following code example demonstrates how to create a new user with the following properties:
        </para>
        
        <itemizedlist>
          <listitem>Login name - <emphasis>jsmith</emphasis></listitem>
          <listitem>First name - <emphasis>John</emphasis></listitem>
          <listitem>Last name - <emphasis>Smith</emphasis></listitem>
          <listitem>E-mail - <emphasis>jsmith@acme.com</emphasis></listitem>
        </itemizedlist> 
        
        <programlisting language="JAVA"><![CDATA[  User user = new User("jsmith");
  user.setFirstName("John");
  user.setLastName("Smith");
  user.setEmail("jsmith@acme.com");
  identityManager.add(user);]]></programlisting>
  
        <para>
          Once the <code>User</code> is created, it's possible to look it up using its login name:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  User user = BasicModel.getUser(identityManager, "jsmith");]]></programlisting>
        
        <para>
          User properties can also be modified after the User has already been created.  The following example demonstrates how
          to change the e-mail address of the user we created above:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  User user = BasicModel.getUser(identityManager, "jsmith");
  user.setEmail("john@smith.com");
  identityManager.update(user);]]></programlisting>
  
        <para>
          Users may also be deleted.  The following example demonstrates how to delete the user previously created:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  User user = BasicModel.getUser(identityManager, "jsmith");
  identityManager.remove("jsmith");]]></programlisting>
        
      </section>
      
      <section>
        <title>Managing Groups</title>
        
        <para>
          The following example demonstrates how to create a new group called <emphasis>employees</emphasis>:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group employees = new Group("employees");]]></programlisting>
        
        <para>
          It is also possible to assign a parent group when creating a group.  The following example demonstrates how
          to create a new group called <emphasis>managers</emphasis>, using the <emphasis>employees</emphasis> group 
          created in the previous example as the parent group:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group managers = new Group("managers", employees);]]></programlisting>
        
        <para>
          To lookup an existing <code>Group</code>, the <code>getGroup()</code> method may be used.  If the group name
          is unique, it can be passed as a single parameter:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group employees = BasicModel.getGroup(identityManager, "employees");]]></programlisting>
        
        <para>
          If the group name is not unique, the parent group must be passed as the second parameter (although it can still be
          provided if the group name is unique):
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group managers = BasicModel.getGroup(identityManager, "managers", employees);]]></programlisting>
        
        <para>
          It is also possible to modify a <code>Group</code>'s name and other properties (besides its parent) after it has
          been created.  The following example demonstrates how to disable the "employees" group we created above:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group employees = BasicModel.getGroup(identityManager, "employees");
  employees.setEnabled(false);
  identityManager.update(employees);]]></programlisting>
        
        <para>
          To remove an existing group, we can use the <code>remove()</code> method:
        </para>
        
        <programlisting language="JAVA"><![CDATA[  Group employees = BasicModel.getGroup(identityManager, "employees");
  identityManager.remove(employees);]]></programlisting>

      </section>
    </section>
    
    <section>
      <title>Managing Relationships</title>
      
      <para>
        Relationships are used to model <emphasis>typed associations</emphasis> between two or more identities.  All 
        concrete relationship types must implement the marker interface <code>org.picketlink.idm.model.Relationship</code>:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/relationshipclassdiagram.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/relationshipclassdiagram.png" align="center"/>
        </imageobject>
      </mediaobject> 
                    
      <para>
        The <code>IdentityManager</code> interface provides three standard methods for managing relationships:
      </para>
      
      <programlisting language="JAVA"><![CDATA[  void add(Relationship relationship);
  void update(Relationship relationship);
  void remove(Relationship relationship);]]></programlisting>
      
      <itemizedlist>
        <listitem>
          <para>
            The <code>add()</code> method is used to create a new relationship.
          </para>
        </listitem>
        
        <listitem>
          <para>
            The <code>update()</code> method is used to update an existing relationship.
          </para>
          
          <note>
            <para>
              Please note that the identities that participate in a relationship cannot be updated themselves, 
              however the attribute values of the relationship can be updated.  If you absolutely need to modify
              the identities of a relationship, then delete the relationship and create it again.
            </para>
          </note>
        </listitem>
        
        <listitem>
          <para>
            The <code>remove()</code> method is used to remove an existing relationship.
          </para>
        </listitem>
      </itemizedlist>
      
      <note>
        <para>
          To search for existing relationships between identity objects, use the Relationship Query API described later
          in this chapter.
        </para>
      </note>
      
      <para>
        Besides the above methods, <code>IdentityManager</code> also provides a number of convenience methods for
        managing many of the built-in relationship types.  See the next section for more details.
      </para>
            
      <section>
        <title>Built In Relationship Types</title>
        
        <para>
          PicketLink provides a number of built-in relationship types, designed to address the most common requirements
          of a typical application.  The following sections describe the built-in relationships and how they are intended
          to be used.  Every built-in relationship type extends the <code>AbstractAttributedType</code> abstract class,
          which provides the basic methods for setting a unique identifier value and managing a set of attribute values:
        </para>
        
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="diagrams/abstractattributedtype.png" align="center" scalefit="1"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="diagrams/abstractattributedtype.png" align="center"/>
          </imageobject>
        </mediaobject> 
        
        <para>
          What this means in practical terms, is that every single relationship is assigned and can be identified by, a unique 
          identifier value.  Also, arbitrary attribute values may be set for all relationship types, which is useful if you 
          require additional metadata or any other type of information to be stored with a relationship.
        </para>
        
        <section>
          <title>Application Roles</title>
          
          <para>
            Application roles are represented by the <code>Grant</code> relationship, which is used to assign application-wide
            privileges to a <code>User</code> or <code>Agent</code>.
          </para>
          
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="diagrams/grant.png" align="center" scalefit="1"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="diagrams/grant.png" align="center"/>
            </imageobject>
          </mediaobject> 
          
          <para>
            The <code>IdentityManager</code> interface provides methods for directly granting a role.  Here's a simple example:
          </para>
          
          <programlisting language="JAVA"><![CDATA[  User bob = BasicModel.getUser(identityManager, "bob");
  Role superuser = BasicModel.getRole(identityManager, "superuser");
  BasicModel.grantRole(relationshipManager, bob, superuser);]]></programlisting>
          
          <para>
            The above code is equivalent to the following:
          </para>
          
          <programlisting language="JAVA"><![CDATA[  User bob = BasicModel.getUser(identityManager, "bob");
  Role superuser = BasicModel.getRole(identityManager, "superuser");
  Grant grant = new Grant(bob, superuser);
  identityManager.add(grant);]]></programlisting>
  
          <para>
            A granted role can also be revoked using the <code>revokeRole()</code> method:
          </para>
          
          <programlisting language="JAVA"><![CDATA[  User bob = BasicModel.getUser(identityManager, "bob");
  Role superuser = BasicModel.getRole(identityManager, "superuser");
  BasicModel.revokeRole(relationshipManager, bob, superuser);]]></programlisting>
  
          <para>
            To check whether an identity has a specific role granted to them, we can use the <code>hasRole()</code> method:
          </para>
          
          <programlisting language="JAVA"><![CDATA[  User bob = BasicModel.getUser(identityManager, "bob");
  Role superuser = BasicModel.getRole(identityManager, "superuser");
  boolean isBobASuperUser = BasicModel.hasRole(relationshipManager, bob, superuser);]]></programlisting>
        </section>
        
        <section>
          <title>Groups and Group Roles</title>
          
          <para>
            The <code>GroupMembership</code> and <code>GroupRole</code> relationships are used to represent a user's membership
            within a <code>Group</code>, and a user's role for a group, respectively.
          </para>
          
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="diagrams/grouprole.png" align="center" scalefit="1"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="diagrams/grouprole.png" align="center"/>
            </imageobject>
          </mediaobject>  
          
          <note>
            <para>
              While the <code>GroupRole</code> relationship type extends <code>GroupMembership</code>, it does 
              <emphasis>not</emphasis> mean that a member of a <code>GroupRole</code> automatically receives 
              <code>GroupMembership</code> membership also - these are two distinct relationship types with
              different semantics.
            </para>
          </note>                              
          
          <para>
            A <code>Group</code> is typically used to form logical collections of users.  Within an organisation, groups are 
            often used to mirror the organisation's structure.  For example, a corporate structure might consist of a sales
            department, administration, management, etc.  This structure can be modelled in PicketLink by creating corresponding
            groups such as <emphasis>sales</emphasis>, <emphasis>administration</emphasis>, and so forth.  Users (who would represent 
            the employees in a corporate structure) may then be assigned group memberships corresponding to their place within 
            the company's organisational structure.  For example, an employee who works in the sales department 
            may be assigned to the <emphasis>sales</emphasis> group.
            Specific application privileges can then be blanket assigned to the <emphasis>sales</emphasis> group, and anyone who 
            is a member of the group is free to access the application's features that require those privileges.
          </para>
         
          <para>
            The <code>GroupRole</code> relationship type should be used when it is intended for an identity to perform a specific
            role for a group, but not be an actual member of the group itself.  For example, an administrator of a group of doctors
            may not be a doctor themselves, but have an administrative role to perform for that group.  If the intent is for 
            an individual identity to both be a member of a group <emphasis>and</emphasis> have an assigned role in that group 
            also, then the identity should have both <code>GroupRole</code> and <code>GroupMembership</code> relationships for 
            that group.
          </para>          
          
          <para>
            Let's start by looking at a simple example - we'll begin by making the assumption that our organization is
            structured in the following way:
          </para>
          
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="diagrams/example_group_structure.png" align="center" scalefit="1"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="diagrams/example_group_structure.png" align="center"/>
            </imageobject>
          </mediaobject>            
          
          <para>
            The following code demonstrates how we would create the hypothetical <emphasis>Sales</emphasis> group which 
            is displayed at the head of the above organisational chart:
          </para>
          
          <programlisting language="JAVA"><![CDATA[  Group sales = new Group("Sales");
  identityManager.add(sales);]]></programlisting>
  
          <para>
            We can then proceed to create its subgroups:
          </para>
          
          <programlisting language="JAVA"><![CDATA[identityManager.add(new Group("North America", sales);
identityManager.add(new Group("EMEA", sales);
identityManager.add(new Group("Asia", sales);
// and so forth]]></programlisting>          

          <para>
            The second parameter of the <code>Group()</code> constructor is used to specify the group's parent group.
            This allows us to create a hierarchical group structure, which can be used to mirror either a simple or complex 
            personnel structure of an organisation.  Let's now take a look at how we assign users to these groups.
          </para>
          
          <para>
            The following code demonstrates how to assign an <emphasis>administrator</emphasis> group role for the
            <emphasis>Northeast</emphasis> sales group to user <emphasis>jsmith</emphasis>.  The 
            <emphasis>administrator</emphasis> group role may be used to grant certain users the privilege to modify
            permissions and roles for that group:
          </para>
          
          <programlisting language="JAVA"><![CDATA[Role admin = BasicModel.getRole(identityManager, "administrator");
User user = BasicModel.getUser(identityManager, "jsmith");
Group group = BasicModel.getGroup(identityManager, "Northeast");
BasicModel.grantGroupRole(relationshipManager, user, admin, group);]]></programlisting>

          <para>
            A group role can be revoked using the <code>revokeGroupRole()</code> method:
          </para>
          
          <programlisting language="JAVA"><![CDATA[BasicModel.revokeGroupRole(relationshipManager, user, admin, group);]]></programlisting>
  
          <para>
            To test whether a user has a particular group role, you can use the <code>hasGroupRole()</code> method:
          </para>
          
          <programlisting language="JAVA"><![CDATA[boolean isUserAGroupAdmin = BasicModel.hasGroupRole(relationshipManager, user, admin, group);]]></programlisting>

          <para>
            Next, let's look at some examples of how to work with simple group memberships. 
            The following code demonstrates how we assign sales staff <emphasis>rbrown</emphasis> to the 
            <emphasis>Northeast</emphasis> sales group:
          </para>
          
          <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "rbrown");
Group group = BasicModel.getGroup(identityManager, "Northeast");
BasicModel.addToGroup(relationshipManager, user, group);]]></programlisting>
          
          <para>
            A <code>User</code> may also be a member of more than one <code>Group</code>; there are no built-in limitations on 
            the number of groups that a <code>User</code> may be a member of.  
          </para>
          
          <para>
            We can use the <code>removeFromGroup()</code> method to remove the same user from the group:
          </para>
          
          <programlisting language="JAVA"><![CDATA[BasicModel.removeFromGroup(relationshipManager, user, group);]]></programlisting>
  
          <para>
            To check whether a user is the member of a group we can use the <code>isMember()</code> method:
          </para>
          
          <programlisting language="JAVA"><![CDATA[boolean isUserAMember = BasicModel.isMember(relationshipManager, user, group);]]></programlisting>
 
          <para>
            Relationships can also be created via the <code>add()</code> method.  The following code is equivalent
            to assigning a group role via the <code>grantGroupRole()</code> method shown above:
          </para>
          
          <programlisting language="JAVA"><![CDATA[Role admin = BasicModel.getRole(identityManager, "administrator");
User user = BasicModel.getUser(identityManager, "jsmith");
Group group = BasicModel.getGroup(identityManager, "Northeast");
GroupRole groupRole = new GroupRole(user, group, admin);
identityManager.add(groupRole);]]></programlisting>
        </section>
        
      </section>
    </section>
    
    <section>
      <title>Realms and Tiers</title>
    
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/realm_tier.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/realm_tier.png" align="center"/>
        </imageobject>
      </mediaobject>         
      
      <para>
        In terms of API, both the <code>Realm</code> and <code>Tier</code> classes implement the <code>Partition</code> interface,
        as shown in the following class diagram:
      </para>
        
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/partition.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/partition.png" align="center"/>
        </imageobject>
      </mediaobject> 
      
      <para>
        A <emphasis>Realm</emphasis> is used to define a discrete set of users, groups and roles.  A typical use case for realms
        is the segregation of corporate user accounts within a multi-tenant application, although it is not limited this use case only.
        As all identity management operations must be performed within the context of an <emphasis>active partition</emphasis>, 
        PicketLink defines the concept of a <emphasis>default realm</emphasis> which becomes the active partition if no other 
        partition has been specified.
      </para>
        
      <para>
        A <emphasis>Tier</emphasis> is a more restrictive type of partition than a realm, as it only allows groups and roles to be 
        defined (but not users).  A Tier may be used to define a set of application-specific groups and roles, which may then be 
        assigned to groups within the same Tier, or to users and groups within a separate Realm.
      </para>
    </section>

</chapter>
